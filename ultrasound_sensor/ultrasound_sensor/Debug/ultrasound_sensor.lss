
ultrasound_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000058c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000412  00000000  00000000  000017a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000436  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026c  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 09 01 	call	0x212	; 0x212 <main>
  8e:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:
#include <util/delay.h>

#define PRESCALER 1024		// 분주비

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24

	UBRR0H = 0x00;
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	UCSR0C |= 0x06;
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <UART_transmit+0x4>
	UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d4:	08 95       	ret

000000d6 <UART_printString>:
}

void UART_printString(char *str)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <UART_printString+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
	UDR0 = data;
}

void UART_printString(char *str)
{
	for(int i = 0; str[i]; i++)
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <UART_printString+0xe>
	UART_transmit(str[i]);
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no)
{
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <UART_print8bitNumber+0xe>
 102:	00 d0       	rcall	.+0      	; 0x104 <UART_print8bitNumber+0x10>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 108:	20 e3       	ldi	r18, 0x30	; 48
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	1c 82       	std	Y+4, r1	; 0x04
 112:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;
	
	if(no > 0){
 114:	88 23       	and	r24, r24
 116:	19 f1       	breq	.+70     	; 0x15e <UART_print8bitNumber+0x6a>
 118:	fe 01       	movw	r30, r28
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 120:	4d ec       	ldi	r20, 0xCD	; 205
 122:	01 c0       	rjmp	.+2      	; 0x126 <UART_print8bitNumber+0x32>
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 124:	89 01       	movw	r16, r18
		{
			numString[i] = no % 10 + '0';
 126:	84 9f       	mul	r24, r20
 128:	91 2d       	mov	r25, r1
 12a:	11 24       	eor	r1, r1
 12c:	96 95       	lsr	r25
 12e:	96 95       	lsr	r25
 130:	96 95       	lsr	r25
 132:	39 2f       	mov	r19, r25
 134:	33 0f       	add	r19, r19
 136:	23 2f       	mov	r18, r19
 138:	22 0f       	add	r18, r18
 13a:	22 0f       	add	r18, r18
 13c:	23 0f       	add	r18, r19
 13e:	82 1b       	sub	r24, r18
 140:	80 5d       	subi	r24, 0xD0	; 208
 142:	81 93       	st	Z+, r24
			no = no / 10;
 144:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 146:	98 01       	movw	r18, r16
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	91 11       	cpse	r25, r1
 14e:	ea cf       	rjmp	.-44     	; 0x124 <UART_print8bitNumber+0x30>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 150:	fe 01       	movw	r30, r28
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 158:	11 23       	and	r17, r17
 15a:	1c f4       	brge	.+6      	; 0x162 <UART_print8bitNumber+0x6e>
 15c:	11 c0       	rjmp	.+34     	; 0x180 <UART_print8bitNumber+0x8c>
}

void UART_print8bitNumber(uint8_t no)
{
	char numString[4] = "0";
	int i, index = 0;
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	80 0f       	add	r24, r16
 166:	91 1f       	adc	r25, r17
 168:	9c 01       	movw	r18, r24
 16a:	2e 5f       	subi	r18, 0xFE	; 254
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	79 01       	movw	r14, r18
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
 170:	f7 01       	movw	r30, r14
 172:	82 91       	ld	r24, -Z
 174:	7f 01       	movw	r14, r30
 176:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 17a:	01 50       	subi	r16, 0x01	; 1
 17c:	11 09       	sbc	r17, r1
 17e:	c2 f7       	brpl	.-16     	; 0x170 <UART_print8bitNumber+0x7c>
	UART_transmit(numString[i]);
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <Timer_init>:

void Timer_init(void)
{
	TCCR0B |= (1 << CS02) | (1 << CS00);		// 분주비 1024로 설정
 196:	85 b5       	in	r24, 0x25	; 37
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	85 bd       	out	0x25, r24	; 37
 19c:	08 95       	ret

0000019e <measure_distance>:
}

uint8_t measure_distance(void)
{
	// 트리거 핀으로 펄스 출력
	PORTC |= (1 << PC0);		// HIGH 값 출력
 19e:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	85 e3       	ldi	r24, 0x35	; 53
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <measure_distance+0x4>
 1a6:	00 00       	nop
	_delay_us(10);				// 10 마이크로초 대기
	PORTC &= ~(1 << PC0);		// LOW 값 출력
 1a8:	40 98       	cbi	0x08, 0	; 8
	
	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
 1aa:	16 bc       	out	0x26, r1	; 38
	while(!(PINC & 0x02))
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <measure_distance+0x16>
		if(TCNT0 > 250) return 255;		// 장애물이 없는 경우
 1ae:	86 b5       	in	r24, 0x26	; 38
 1b0:	8b 3f       	cpi	r24, 0xFB	; 251
 1b2:	68 f5       	brcc	.+90     	; 0x20e <measure_distance+0x70>
	_delay_us(10);				// 10 마이크로초 대기
	PORTC &= ~(1 << PC0);		// LOW 값 출력
	
	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
	while(!(PINC & 0x02))
 1b4:	31 9b       	sbis	0x06, 1	; 6
 1b6:	fb cf       	rjmp	.-10     	; 0x1ae <measure_distance+0x10>
		if(TCNT0 > 250) return 255;		// 장애물이 없는 경우
		
	// 에코 핀이 LOW가 될 때까지의 시간 측정
	TCNT0 = 0;		// 카운터를 0으로 초기화
 1b8:	16 bc       	out	0x26, r1	; 38
	while(PINC & 0x02)
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <measure_distance+0x28>
	{
		if(TCNT0 > 250)		// 장애물이 없는 경우
 1bc:	86 b5       	in	r24, 0x26	; 38
 1be:	8b 3f       	cpi	r24, 0xFB	; 251
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <measure_distance+0x28>
		{
			TCNT0 = 0;
 1c2:	16 bc       	out	0x26, r1	; 38
			break;
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <measure_distance+0x2c>
	while(!(PINC & 0x02))
		if(TCNT0 > 250) return 255;		// 장애물이 없는 경우
		
	// 에코 핀이 LOW가 될 때까지의 시간 측정
	TCNT0 = 0;		// 카운터를 0으로 초기화
	while(PINC & 0x02)
 1c6:	31 99       	sbic	0x06, 1	; 6
 1c8:	f9 cf       	rjmp	.-14     	; 0x1bc <measure_distance+0x1e>
			break;
		}
	}
	
	// 에코 핀의 펄스 폭을 마이크로초 단위로 계산
	double pulse_width = TCNT0 * PRESCALER * 1000000.0 / F_CPU;
 1ca:	66 b5       	in	r22, 0x26	; 38
	
	return pulse_width / 58;		// 센티미터 단위 거리 반환
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	76 2f       	mov	r23, r22
 1d0:	66 27       	eor	r22, r22
 1d2:	77 0f       	add	r23, r23
 1d4:	77 0f       	add	r23, r23
 1d6:	07 2e       	mov	r0, r23
 1d8:	00 0c       	add	r0, r0
 1da:	88 0b       	sbc	r24, r24
 1dc:	99 0b       	sbc	r25, r25
 1de:	0e 94 cb 01 	call	0x396	; 0x396 <__floatsisf>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	34 e2       	ldi	r19, 0x24	; 36
 1e6:	44 e7       	ldi	r20, 0x74	; 116
 1e8:	59 e4       	ldi	r21, 0x49	; 73
 1ea:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	34 e2       	ldi	r19, 0x24	; 36
 1f2:	44 e7       	ldi	r20, 0x74	; 116
 1f4:	5b e4       	ldi	r21, 0x4B	; 75
 1f6:	0e 94 28 01 	call	0x250	; 0x250 <__divsf3>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	48 e6       	ldi	r20, 0x68	; 104
 200:	52 e4       	ldi	r21, 0x42	; 66
 202:	0e 94 28 01 	call	0x250	; 0x250 <__divsf3>
 206:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
 20a:	86 2f       	mov	r24, r22
 20c:	08 95       	ret
	PORTC &= ~(1 << PC0);		// LOW 값 출력
	
	// 에코 핀이 HIGH가 될 때까지 대기
	TCNT0 = 0;
	while(!(PINC & 0x02))
		if(TCNT0 > 250) return 255;		// 장애물이 없는 경우
 20e:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 에코 핀의 펄스 폭을 마이크로초 단위로 계산
	double pulse_width = TCNT0 * PRESCALER * 1000000.0 / F_CPU;
	
	return pulse_width / 58;		// 센티미터 단위 거리 반환
}
 210:	08 95       	ret

00000212 <main>:


int main(void)
{
    uint8_t distance;
	DDRC |= 0x01;		// 트리거 핀 출력으로 설정
 212:	38 9a       	sbi	0x07, 0	; 7
	DDRC &= ~0xFD;		// 에코 핀 입력으로 설정 1111 1101
 214:	87 b1       	in	r24, 0x07	; 7
 216:	82 70       	andi	r24, 0x02	; 2
 218:	87 b9       	out	0x07, r24	; 7
	
	UART_INIT();		// UART 통신 초기화
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	Timer_init();		// 타이머 초기화
 21e:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_init>
	
    while (1) 
    {
		distance = measure_distance();		// 거리 측정
 222:	0e 94 cf 00 	call	0x19e	; 0x19e <measure_distance>
 226:	c8 2f       	mov	r28, r24
		
		UART_printString("Distance(cm) = ");
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
		UART_print8bitNumber(distance);
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print8bitNumber>
		UART_transmit('\n');
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	83 ed       	ldi	r24, 0xD3	; 211
 240:	90 e3       	ldi	r25, 0x30	; 48
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x30>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x3a>
 24c:	00 00       	nop
 24e:	e9 cf       	rjmp	.-46     	; 0x222 <main+0x10>

00000250 <__divsf3>:
 250:	0e 94 3c 01 	call	0x278	; 0x278 <__divsf3x>
 254:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_round>
 258:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_pscB>
 25c:	58 f0       	brcs	.+22     	; 0x274 <__divsf3+0x24>
 25e:	0e 94 0f 02 	call	0x41e	; 0x41e <__fp_pscA>
 262:	40 f0       	brcs	.+16     	; 0x274 <__divsf3+0x24>
 264:	29 f4       	brne	.+10     	; 0x270 <__divsf3+0x20>
 266:	5f 3f       	cpi	r21, 0xFF	; 255
 268:	29 f0       	breq	.+10     	; 0x274 <__divsf3+0x24>
 26a:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 26e:	51 11       	cpse	r21, r1
 270:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>
 274:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_nan>

00000278 <__divsf3x>:
 278:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_split3>
 27c:	68 f3       	brcs	.-38     	; 0x258 <__divsf3+0x8>

0000027e <__divsf3_pse>:
 27e:	99 23       	and	r25, r25
 280:	b1 f3       	breq	.-20     	; 0x26e <__divsf3+0x1e>
 282:	55 23       	and	r21, r21
 284:	91 f3       	breq	.-28     	; 0x26a <__divsf3+0x1a>
 286:	95 1b       	sub	r25, r21
 288:	55 0b       	sbc	r21, r21
 28a:	bb 27       	eor	r27, r27
 28c:	aa 27       	eor	r26, r26
 28e:	62 17       	cp	r22, r18
 290:	73 07       	cpc	r23, r19
 292:	84 07       	cpc	r24, r20
 294:	38 f0       	brcs	.+14     	; 0x2a4 <__divsf3_pse+0x26>
 296:	9f 5f       	subi	r25, 0xFF	; 255
 298:	5f 4f       	sbci	r21, 0xFF	; 255
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	44 1f       	adc	r20, r20
 2a0:	aa 1f       	adc	r26, r26
 2a2:	a9 f3       	breq	.-22     	; 0x28e <__divsf3_pse+0x10>
 2a4:	35 d0       	rcall	.+106    	; 0x310 <__divsf3_pse+0x92>
 2a6:	0e 2e       	mov	r0, r30
 2a8:	3a f0       	brmi	.+14     	; 0x2b8 <__divsf3_pse+0x3a>
 2aa:	e0 e8       	ldi	r30, 0x80	; 128
 2ac:	32 d0       	rcall	.+100    	; 0x312 <__divsf3_pse+0x94>
 2ae:	91 50       	subi	r25, 0x01	; 1
 2b0:	50 40       	sbci	r21, 0x00	; 0
 2b2:	e6 95       	lsr	r30
 2b4:	00 1c       	adc	r0, r0
 2b6:	ca f7       	brpl	.-14     	; 0x2aa <__divsf3_pse+0x2c>
 2b8:	2b d0       	rcall	.+86     	; 0x310 <__divsf3_pse+0x92>
 2ba:	fe 2f       	mov	r31, r30
 2bc:	29 d0       	rcall	.+82     	; 0x310 <__divsf3_pse+0x92>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	bb 1f       	adc	r27, r27
 2c6:	26 17       	cp	r18, r22
 2c8:	37 07       	cpc	r19, r23
 2ca:	48 07       	cpc	r20, r24
 2cc:	ab 07       	cpc	r26, r27
 2ce:	b0 e8       	ldi	r27, 0x80	; 128
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <__divsf3_pse+0x56>
 2d2:	bb 0b       	sbc	r27, r27
 2d4:	80 2d       	mov	r24, r0
 2d6:	bf 01       	movw	r22, r30
 2d8:	ff 27       	eor	r31, r31
 2da:	93 58       	subi	r25, 0x83	; 131
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	3a f0       	brmi	.+14     	; 0x2ee <__divsf3_pse+0x70>
 2e0:	9e 3f       	cpi	r25, 0xFE	; 254
 2e2:	51 05       	cpc	r21, r1
 2e4:	78 f0       	brcs	.+30     	; 0x304 <__divsf3_pse+0x86>
 2e6:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 2ea:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>
 2ee:	5f 3f       	cpi	r21, 0xFF	; 255
 2f0:	e4 f3       	brlt	.-8      	; 0x2ea <__divsf3_pse+0x6c>
 2f2:	98 3e       	cpi	r25, 0xE8	; 232
 2f4:	d4 f3       	brlt	.-12     	; 0x2ea <__divsf3_pse+0x6c>
 2f6:	86 95       	lsr	r24
 2f8:	77 95       	ror	r23
 2fa:	67 95       	ror	r22
 2fc:	b7 95       	ror	r27
 2fe:	f7 95       	ror	r31
 300:	9f 5f       	subi	r25, 0xFF	; 255
 302:	c9 f7       	brne	.-14     	; 0x2f6 <__divsf3_pse+0x78>
 304:	88 0f       	add	r24, r24
 306:	91 1d       	adc	r25, r1
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	97 f9       	bld	r25, 7
 30e:	08 95       	ret
 310:	e1 e0       	ldi	r30, 0x01	; 1
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	bb 1f       	adc	r27, r27
 31a:	62 17       	cp	r22, r18
 31c:	73 07       	cpc	r23, r19
 31e:	84 07       	cpc	r24, r20
 320:	ba 07       	cpc	r27, r26
 322:	20 f0       	brcs	.+8      	; 0x32c <__divsf3_pse+0xae>
 324:	62 1b       	sub	r22, r18
 326:	73 0b       	sbc	r23, r19
 328:	84 0b       	sbc	r24, r20
 32a:	ba 0b       	sbc	r27, r26
 32c:	ee 1f       	adc	r30, r30
 32e:	88 f7       	brcc	.-30     	; 0x312 <__divsf3_pse+0x94>
 330:	e0 95       	com	r30
 332:	08 95       	ret

00000334 <__fixunssfsi>:
 334:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_splitA>
 338:	88 f0       	brcs	.+34     	; 0x35c <__fixunssfsi+0x28>
 33a:	9f 57       	subi	r25, 0x7F	; 127
 33c:	98 f0       	brcs	.+38     	; 0x364 <__fixunssfsi+0x30>
 33e:	b9 2f       	mov	r27, r25
 340:	99 27       	eor	r25, r25
 342:	b7 51       	subi	r27, 0x17	; 23
 344:	b0 f0       	brcs	.+44     	; 0x372 <__fixunssfsi+0x3e>
 346:	e1 f0       	breq	.+56     	; 0x380 <__fixunssfsi+0x4c>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	1a f0       	brmi	.+6      	; 0x358 <__fixunssfsi+0x24>
 352:	ba 95       	dec	r27
 354:	c9 f7       	brne	.-14     	; 0x348 <__fixunssfsi+0x14>
 356:	14 c0       	rjmp	.+40     	; 0x380 <__fixunssfsi+0x4c>
 358:	b1 30       	cpi	r27, 0x01	; 1
 35a:	91 f0       	breq	.+36     	; 0x380 <__fixunssfsi+0x4c>
 35c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_zero>
 360:	b1 e0       	ldi	r27, 0x01	; 1
 362:	08 95       	ret
 364:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_zero>
 368:	67 2f       	mov	r22, r23
 36a:	78 2f       	mov	r23, r24
 36c:	88 27       	eor	r24, r24
 36e:	b8 5f       	subi	r27, 0xF8	; 248
 370:	39 f0       	breq	.+14     	; 0x380 <__fixunssfsi+0x4c>
 372:	b9 3f       	cpi	r27, 0xF9	; 249
 374:	cc f3       	brlt	.-14     	; 0x368 <__fixunssfsi+0x34>
 376:	86 95       	lsr	r24
 378:	77 95       	ror	r23
 37a:	67 95       	ror	r22
 37c:	b3 95       	inc	r27
 37e:	d9 f7       	brne	.-10     	; 0x376 <__fixunssfsi+0x42>
 380:	3e f4       	brtc	.+14     	; 0x390 <__fixunssfsi+0x5c>
 382:	90 95       	com	r25
 384:	80 95       	com	r24
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	08 95       	ret

00000392 <__floatunsisf>:
 392:	e8 94       	clt
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <__floatsisf+0x12>

00000396 <__floatsisf>:
 396:	97 fb       	bst	r25, 7
 398:	3e f4       	brtc	.+14     	; 0x3a8 <__floatsisf+0x12>
 39a:	90 95       	com	r25
 39c:	80 95       	com	r24
 39e:	70 95       	com	r23
 3a0:	61 95       	neg	r22
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	8f 4f       	sbci	r24, 0xFF	; 255
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	99 23       	and	r25, r25
 3aa:	a9 f0       	breq	.+42     	; 0x3d6 <__floatsisf+0x40>
 3ac:	f9 2f       	mov	r31, r25
 3ae:	96 e9       	ldi	r25, 0x96	; 150
 3b0:	bb 27       	eor	r27, r27
 3b2:	93 95       	inc	r25
 3b4:	f6 95       	lsr	r31
 3b6:	87 95       	ror	r24
 3b8:	77 95       	ror	r23
 3ba:	67 95       	ror	r22
 3bc:	b7 95       	ror	r27
 3be:	f1 11       	cpse	r31, r1
 3c0:	f8 cf       	rjmp	.-16     	; 0x3b2 <__floatsisf+0x1c>
 3c2:	fa f4       	brpl	.+62     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3c4:	bb 0f       	add	r27, r27
 3c6:	11 f4       	brne	.+4      	; 0x3cc <__floatsisf+0x36>
 3c8:	60 ff       	sbrs	r22, 0
 3ca:	1b c0       	rjmp	.+54     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	8f 4f       	sbci	r24, 0xFF	; 255
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	16 c0       	rjmp	.+44     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d6:	88 23       	and	r24, r24
 3d8:	11 f0       	breq	.+4      	; 0x3de <__floatsisf+0x48>
 3da:	96 e9       	ldi	r25, 0x96	; 150
 3dc:	11 c0       	rjmp	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
 3de:	77 23       	and	r23, r23
 3e0:	21 f0       	breq	.+8      	; 0x3ea <__floatsisf+0x54>
 3e2:	9e e8       	ldi	r25, 0x8E	; 142
 3e4:	87 2f       	mov	r24, r23
 3e6:	76 2f       	mov	r23, r22
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__floatsisf+0x5e>
 3ea:	66 23       	and	r22, r22
 3ec:	71 f0       	breq	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ee:	96 e8       	ldi	r25, 0x86	; 134
 3f0:	86 2f       	mov	r24, r22
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	2a f0       	brmi	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	9a 95       	dec	r25
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	da f7       	brpl	.-10     	; 0x3f8 <__floatsisf+0x62>
 402:	88 0f       	add	r24, r24
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	97 f9       	bld	r25, 7
 40a:	08 95       	ret

0000040c <__fp_inf>:
 40c:	97 f9       	bld	r25, 7
 40e:	9f 67       	ori	r25, 0x7F	; 127
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	08 95       	ret

00000418 <__fp_nan>:
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	80 ec       	ldi	r24, 0xC0	; 192
 41c:	08 95       	ret

0000041e <__fp_pscA>:
 41e:	00 24       	eor	r0, r0
 420:	0a 94       	dec	r0
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	18 06       	cpc	r1, r24
 428:	09 06       	cpc	r0, r25
 42a:	08 95       	ret

0000042c <__fp_pscB>:
 42c:	00 24       	eor	r0, r0
 42e:	0a 94       	dec	r0
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	05 06       	cpc	r0, r21
 438:	08 95       	ret

0000043a <__fp_round>:
 43a:	09 2e       	mov	r0, r25
 43c:	03 94       	inc	r0
 43e:	00 0c       	add	r0, r0
 440:	11 f4       	brne	.+4      	; 0x446 <__fp_round+0xc>
 442:	88 23       	and	r24, r24
 444:	52 f0       	brmi	.+20     	; 0x45a <__fp_round+0x20>
 446:	bb 0f       	add	r27, r27
 448:	40 f4       	brcc	.+16     	; 0x45a <__fp_round+0x20>
 44a:	bf 2b       	or	r27, r31
 44c:	11 f4       	brne	.+4      	; 0x452 <__fp_round+0x18>
 44e:	60 ff       	sbrs	r22, 0
 450:	04 c0       	rjmp	.+8      	; 0x45a <__fp_round+0x20>
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__fp_split3>:
 45c:	57 fd       	sbrc	r21, 7
 45e:	90 58       	subi	r25, 0x80	; 128
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	59 f0       	breq	.+22     	; 0x47c <__fp_splitA+0x10>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	71 f0       	breq	.+28     	; 0x486 <__fp_splitA+0x1a>
 46a:	47 95       	ror	r20

0000046c <__fp_splitA>:
 46c:	88 0f       	add	r24, r24
 46e:	97 fb       	bst	r25, 7
 470:	99 1f       	adc	r25, r25
 472:	61 f0       	breq	.+24     	; 0x48c <__fp_splitA+0x20>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	79 f0       	breq	.+30     	; 0x496 <__fp_splitA+0x2a>
 478:	87 95       	ror	r24
 47a:	08 95       	ret
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	55 1f       	adc	r21, r21
 484:	f2 cf       	rjmp	.-28     	; 0x46a <__fp_split3+0xe>
 486:	46 95       	lsr	r20
 488:	f1 df       	rcall	.-30     	; 0x46c <__fp_splitA>
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__fp_splitA+0x30>
 48c:	16 16       	cp	r1, r22
 48e:	17 06       	cpc	r1, r23
 490:	18 06       	cpc	r1, r24
 492:	99 1f       	adc	r25, r25
 494:	f1 cf       	rjmp	.-30     	; 0x478 <__fp_splitA+0xc>
 496:	86 95       	lsr	r24
 498:	71 05       	cpc	r23, r1
 49a:	61 05       	cpc	r22, r1
 49c:	08 94       	sec
 49e:	08 95       	ret

000004a0 <__fp_zero>:
 4a0:	e8 94       	clt

000004a2 <__fp_szero>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	66 27       	eor	r22, r22
 4a6:	77 27       	eor	r23, r23
 4a8:	cb 01       	movw	r24, r22
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret

000004ae <__mulsf3>:
 4ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3x>
 4b2:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_round>
 4b6:	0e 94 0f 02 	call	0x41e	; 0x41e <__fp_pscA>
 4ba:	38 f0       	brcs	.+14     	; 0x4ca <__mulsf3+0x1c>
 4bc:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_pscB>
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <__mulsf3+0x1c>
 4c2:	95 23       	and	r25, r21
 4c4:	11 f0       	breq	.+4      	; 0x4ca <__mulsf3+0x1c>
 4c6:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 4ca:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_nan>
 4ce:	11 24       	eor	r1, r1
 4d0:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>

000004d4 <__mulsf3x>:
 4d4:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_split3>
 4d8:	70 f3       	brcs	.-36     	; 0x4b6 <__mulsf3+0x8>

000004da <__mulsf3_pse>:
 4da:	95 9f       	mul	r25, r21
 4dc:	c1 f3       	breq	.-16     	; 0x4ce <__mulsf3+0x20>
 4de:	95 0f       	add	r25, r21
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	55 1f       	adc	r21, r21
 4e4:	62 9f       	mul	r22, r18
 4e6:	f0 01       	movw	r30, r0
 4e8:	72 9f       	mul	r23, r18
 4ea:	bb 27       	eor	r27, r27
 4ec:	f0 0d       	add	r31, r0
 4ee:	b1 1d       	adc	r27, r1
 4f0:	63 9f       	mul	r22, r19
 4f2:	aa 27       	eor	r26, r26
 4f4:	f0 0d       	add	r31, r0
 4f6:	b1 1d       	adc	r27, r1
 4f8:	aa 1f       	adc	r26, r26
 4fa:	64 9f       	mul	r22, r20
 4fc:	66 27       	eor	r22, r22
 4fe:	b0 0d       	add	r27, r0
 500:	a1 1d       	adc	r26, r1
 502:	66 1f       	adc	r22, r22
 504:	82 9f       	mul	r24, r18
 506:	22 27       	eor	r18, r18
 508:	b0 0d       	add	r27, r0
 50a:	a1 1d       	adc	r26, r1
 50c:	62 1f       	adc	r22, r18
 50e:	73 9f       	mul	r23, r19
 510:	b0 0d       	add	r27, r0
 512:	a1 1d       	adc	r26, r1
 514:	62 1f       	adc	r22, r18
 516:	83 9f       	mul	r24, r19
 518:	a0 0d       	add	r26, r0
 51a:	61 1d       	adc	r22, r1
 51c:	22 1f       	adc	r18, r18
 51e:	74 9f       	mul	r23, r20
 520:	33 27       	eor	r19, r19
 522:	a0 0d       	add	r26, r0
 524:	61 1d       	adc	r22, r1
 526:	23 1f       	adc	r18, r19
 528:	84 9f       	mul	r24, r20
 52a:	60 0d       	add	r22, r0
 52c:	21 1d       	adc	r18, r1
 52e:	82 2f       	mov	r24, r18
 530:	76 2f       	mov	r23, r22
 532:	6a 2f       	mov	r22, r26
 534:	11 24       	eor	r1, r1
 536:	9f 57       	subi	r25, 0x7F	; 127
 538:	50 40       	sbci	r21, 0x00	; 0
 53a:	9a f0       	brmi	.+38     	; 0x562 <__mulsf3_pse+0x88>
 53c:	f1 f0       	breq	.+60     	; 0x57a <__mulsf3_pse+0xa0>
 53e:	88 23       	and	r24, r24
 540:	4a f0       	brmi	.+18     	; 0x554 <__mulsf3_pse+0x7a>
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	bb 1f       	adc	r27, r27
 548:	66 1f       	adc	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	50 40       	sbci	r21, 0x00	; 0
 552:	a9 f7       	brne	.-22     	; 0x53e <__mulsf3_pse+0x64>
 554:	9e 3f       	cpi	r25, 0xFE	; 254
 556:	51 05       	cpc	r21, r1
 558:	80 f0       	brcs	.+32     	; 0x57a <__mulsf3_pse+0xa0>
 55a:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 55e:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>
 562:	5f 3f       	cpi	r21, 0xFF	; 255
 564:	e4 f3       	brlt	.-8      	; 0x55e <__mulsf3_pse+0x84>
 566:	98 3e       	cpi	r25, 0xE8	; 232
 568:	d4 f3       	brlt	.-12     	; 0x55e <__mulsf3_pse+0x84>
 56a:	86 95       	lsr	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b7 95       	ror	r27
 572:	f7 95       	ror	r31
 574:	e7 95       	ror	r30
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	c1 f7       	brne	.-16     	; 0x56a <__mulsf3_pse+0x90>
 57a:	fe 2b       	or	r31, r30
 57c:	88 0f       	add	r24, r24
 57e:	91 1d       	adc	r25, r1
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
