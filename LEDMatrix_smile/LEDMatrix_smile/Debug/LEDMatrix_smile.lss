
LEDMatrix_smile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fd  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8e:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LEDMatrix_init>:
#include "LEDMatrix.h"

void LEDMatrix_init(void)
{
	// 해당 column 핀을 출력으로 설정
	MATRIX_COL1_DDR |= (1 << MATRIX_COL1_PIN);
  96:	22 9a       	sbi	0x04, 2	; 4
	MATRIX_COL2_DDR |= (1 << MATRIX_COL2_PIN);
  98:	23 9a       	sbi	0x04, 3	; 4
	MATRIX_COL3_DDR |= (1 << MATRIX_COL3_PIN);
  9a:	24 9a       	sbi	0x04, 4	; 4
	MATRIX_COL4_DDR |= (1 << MATRIX_COL4_PIN);
  9c:	25 9a       	sbi	0x04, 5	; 4
	MATRIX_COL5_DDR |= (1 << MATRIX_COL5_PIN);
  9e:	38 9a       	sbi	0x07, 0	; 7
	MATRIX_COL6_DDR |= (1 << MATRIX_COL6_PIN);
  a0:	39 9a       	sbi	0x07, 1	; 7
	MATRIX_COL7_DDR |= (1 << MATRIX_COL7_PIN);
  a2:	3a 9a       	sbi	0x07, 2	; 7
	MATRIX_COL8_DDR |= (1 << MATRIX_COL8_PIN);
  a4:	3b 9a       	sbi	0x07, 3	; 7
	
	// 해당 row 핀을 출력으로 설정
	MATRIX_ROW1_DDR |= (1 << MATRIX_ROW1_PIN);
  a6:	52 9a       	sbi	0x0a, 2	; 10
	MATRIX_ROW2_DDR |= (1 << MATRIX_ROW2_PIN);
  a8:	53 9a       	sbi	0x0a, 3	; 10
	MATRIX_ROW3_DDR |= (1 << MATRIX_ROW3_PIN);
  aa:	54 9a       	sbi	0x0a, 4	; 10
	MATRIX_ROW4_DDR |= (1 << MATRIX_ROW4_PIN);
  ac:	55 9a       	sbi	0x0a, 5	; 10
	MATRIX_ROW5_DDR |= (1 << MATRIX_ROW5_PIN);
  ae:	56 9a       	sbi	0x0a, 6	; 10
	MATRIX_ROW6_DDR |= (1 << MATRIX_ROW6_PIN);
  b0:	57 9a       	sbi	0x0a, 7	; 10
	MATRIX_ROW7_DDR |= (1 << MATRIX_ROW7_PIN);
  b2:	50 9a       	sbi	0x0a, 0	; 10
	MATRIX_ROW8_DDR |= (1 << MATRIX_ROW8_PIN);
  b4:	51 9a       	sbi	0x0a, 1	; 10
  b6:	08 95       	ret

000000b8 <LEDMatrix_writeColumn>:
}

void LEDMatrix_writeColumn(uint8_t col_data)		// column 데이터 출력
{
	if(col_data & (1 << 0))		MATRIX_COL1_PORT |= (1 << MATRIX_COL1_PIN);		// ON
  b8:	80 ff       	sbrs	r24, 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <LEDMatrix_writeColumn+0x8>
  bc:	2a 9a       	sbi	0x05, 2	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <LEDMatrix_writeColumn+0xa>
	else  MATRIX_COL1_PORT &= ~(1 << MATRIX_COL1_PIN);		// OFF
  c0:	2a 98       	cbi	0x05, 2	; 5
	
	if(col_data & (1 << 1))		MATRIX_COL2_PORT |= (1 << MATRIX_COL2_PIN);		// ON
  c2:	81 ff       	sbrs	r24, 1
  c4:	02 c0       	rjmp	.+4      	; 0xca <LEDMatrix_writeColumn+0x12>
  c6:	2b 9a       	sbi	0x05, 3	; 5
  c8:	01 c0       	rjmp	.+2      	; 0xcc <LEDMatrix_writeColumn+0x14>
	else  MATRIX_COL2_PORT &= ~(1 << MATRIX_COL2_PIN);		// OFF
  ca:	2b 98       	cbi	0x05, 3	; 5
	
	if(col_data & (1 << 2))		MATRIX_COL3_PORT |= (1 << MATRIX_COL3_PIN);		// ON
  cc:	82 ff       	sbrs	r24, 2
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <LEDMatrix_writeColumn+0x1c>
  d0:	2c 9a       	sbi	0x05, 4	; 5
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <LEDMatrix_writeColumn+0x1e>
	else  MATRIX_COL3_PORT &= ~(1 << MATRIX_COL3_PIN);		// OFF
  d4:	2c 98       	cbi	0x05, 4	; 5
	
	if(col_data & (1 << 3))		MATRIX_COL4_PORT |= (1 << MATRIX_COL4_PIN);		// ON
  d6:	83 ff       	sbrs	r24, 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <LEDMatrix_writeColumn+0x26>
  da:	2d 9a       	sbi	0x05, 5	; 5
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <LEDMatrix_writeColumn+0x28>
	else  MATRIX_COL4_PORT &= ~(1 << MATRIX_COL4_PIN);		// OFF
  de:	2d 98       	cbi	0x05, 5	; 5
	
	if(col_data & (1 << 4))		MATRIX_COL5_PORT |= (1 << MATRIX_COL5_PIN);		// ON
  e0:	84 ff       	sbrs	r24, 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <LEDMatrix_writeColumn+0x30>
  e4:	40 9a       	sbi	0x08, 0	; 8
  e6:	01 c0       	rjmp	.+2      	; 0xea <LEDMatrix_writeColumn+0x32>
	else  MATRIX_COL5_PORT &= ~(1 << MATRIX_COL5_PIN);		// OFF
  e8:	40 98       	cbi	0x08, 0	; 8
	
	if(col_data & (1 << 5))		MATRIX_COL6_PORT |= (1 << MATRIX_COL6_PIN);		// ON
  ea:	85 ff       	sbrs	r24, 5
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <LEDMatrix_writeColumn+0x3a>
  ee:	41 9a       	sbi	0x08, 1	; 8
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <LEDMatrix_writeColumn+0x3c>
	else  MATRIX_COL6_PORT &= ~(1 << MATRIX_COL6_PIN);		// OFF
  f2:	41 98       	cbi	0x08, 1	; 8
	
	if(col_data & (1 << 6))		MATRIX_COL7_PORT |= (1 << MATRIX_COL7_PIN);		// ON
  f4:	86 ff       	sbrs	r24, 6
  f6:	02 c0       	rjmp	.+4      	; 0xfc <LEDMatrix_writeColumn+0x44>
  f8:	42 9a       	sbi	0x08, 2	; 8
  fa:	01 c0       	rjmp	.+2      	; 0xfe <LEDMatrix_writeColumn+0x46>
	else  MATRIX_COL7_PORT &= ~(1 << MATRIX_COL7_PIN);		// OFF
  fc:	42 98       	cbi	0x08, 2	; 8
	
	if(col_data & (1 << 7))		MATRIX_COL8_PORT |= (1 << MATRIX_COL8_PIN);		// ON
  fe:	88 23       	and	r24, r24
 100:	14 f4       	brge	.+4      	; 0x106 <LEDMatrix_writeColumn+0x4e>
 102:	43 9a       	sbi	0x08, 3	; 8
 104:	08 95       	ret
	else  MATRIX_COL8_PORT &= ~(1 << MATRIX_COL8_PIN);		// OFF
 106:	43 98       	cbi	0x08, 3	; 8
 108:	08 95       	ret

0000010a <LEDMatrix_writeRow>:
}

void LEDMatrix_writeRow(uint8_t row_data)		// row 데이터 출력
{
	if(row_data & (1 << 7))		MATRIX_ROW1_PORT |= (1 << MATRIX_ROW1_PIN);		// OFF
 10a:	88 23       	and	r24, r24
 10c:	14 f4       	brge	.+4      	; 0x112 <LEDMatrix_writeRow+0x8>
 10e:	5a 9a       	sbi	0x0b, 2	; 11
 110:	01 c0       	rjmp	.+2      	; 0x114 <LEDMatrix_writeRow+0xa>
	else  MATRIX_ROW1_PORT &= ~(1 << MATRIX_ROW1_PIN);		// ON
 112:	5a 98       	cbi	0x0b, 2	; 11
	
	if(row_data & (1 << 6))		MATRIX_ROW2_PORT |= (1 << MATRIX_ROW2_PIN);		
 114:	86 ff       	sbrs	r24, 6
 116:	02 c0       	rjmp	.+4      	; 0x11c <LEDMatrix_writeRow+0x12>
 118:	5b 9a       	sbi	0x0b, 3	; 11
 11a:	01 c0       	rjmp	.+2      	; 0x11e <LEDMatrix_writeRow+0x14>
	else  MATRIX_ROW2_PORT &= ~(1 << MATRIX_ROW2_PIN);		
 11c:	5b 98       	cbi	0x0b, 3	; 11
	
	if(row_data & (1 << 5))		MATRIX_ROW3_PORT |= (1 << MATRIX_ROW3_PIN);		
 11e:	85 ff       	sbrs	r24, 5
 120:	02 c0       	rjmp	.+4      	; 0x126 <LEDMatrix_writeRow+0x1c>
 122:	5c 9a       	sbi	0x0b, 4	; 11
 124:	01 c0       	rjmp	.+2      	; 0x128 <LEDMatrix_writeRow+0x1e>
	else  MATRIX_ROW3_PORT &= ~(1 << MATRIX_ROW3_PIN);		
 126:	5c 98       	cbi	0x0b, 4	; 11
	
	if(row_data & (1 << 4))		MATRIX_ROW4_PORT |= (1 << MATRIX_ROW4_PIN);		
 128:	84 ff       	sbrs	r24, 4
 12a:	02 c0       	rjmp	.+4      	; 0x130 <LEDMatrix_writeRow+0x26>
 12c:	5d 9a       	sbi	0x0b, 5	; 11
 12e:	01 c0       	rjmp	.+2      	; 0x132 <LEDMatrix_writeRow+0x28>
	else  MATRIX_ROW4_PORT &= ~(1 << MATRIX_ROW4_PIN);		
 130:	5d 98       	cbi	0x0b, 5	; 11
	
	if(row_data & (1 << 3))		MATRIX_ROW5_PORT |= (1 << MATRIX_ROW5_PIN);		
 132:	83 ff       	sbrs	r24, 3
 134:	02 c0       	rjmp	.+4      	; 0x13a <LEDMatrix_writeRow+0x30>
 136:	5e 9a       	sbi	0x0b, 6	; 11
 138:	01 c0       	rjmp	.+2      	; 0x13c <LEDMatrix_writeRow+0x32>
	else  MATRIX_ROW5_PORT &= ~(1 << MATRIX_ROW5_PIN);		
 13a:	5e 98       	cbi	0x0b, 6	; 11
	
	if(row_data & (1 << 2))		MATRIX_ROW6_PORT |= (1 << MATRIX_ROW6_PIN);		
 13c:	82 ff       	sbrs	r24, 2
 13e:	02 c0       	rjmp	.+4      	; 0x144 <LEDMatrix_writeRow+0x3a>
 140:	5f 9a       	sbi	0x0b, 7	; 11
 142:	01 c0       	rjmp	.+2      	; 0x146 <LEDMatrix_writeRow+0x3c>
	else  MATRIX_ROW6_PORT &= ~(1 << MATRIX_ROW6_PIN);		
 144:	5f 98       	cbi	0x0b, 7	; 11
	
	if(row_data & (1 << 1))		MATRIX_ROW7_PORT |= (1 << MATRIX_ROW7_PIN);		
 146:	81 ff       	sbrs	r24, 1
 148:	02 c0       	rjmp	.+4      	; 0x14e <LEDMatrix_writeRow+0x44>
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	01 c0       	rjmp	.+2      	; 0x150 <LEDMatrix_writeRow+0x46>
	else  MATRIX_ROW7_PORT &= ~(1 << MATRIX_ROW7_PIN);		
 14e:	58 98       	cbi	0x0b, 0	; 11
	
	if(row_data & (1 << 0))		MATRIX_ROW8_PORT |= (1 << MATRIX_ROW8_PIN);		
 150:	80 ff       	sbrs	r24, 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <LEDMatrix_writeRow+0x4e>
 154:	59 9a       	sbi	0x0b, 1	; 11
 156:	08 95       	ret
	else  MATRIX_ROW8_PORT &= ~(1 << MATRIX_ROW8_PIN);		
 158:	59 98       	cbi	0x0b, 1	; 11
 15a:	08 95       	ret

0000015c <main>:
}

int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	28 97       	sbiw	r28, 0x08	; 8
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
    LEDMatrix_init();
 170:	0e 94 4b 00 	call	0x96	; 0x96 <LEDMatrix_init>
	
	uint8_t smile[] = {
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	de 01       	movw	r26, r28
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	8a 95       	dec	r24
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x22>
    {
		for(int i = 0; i < 8; i++)
		{
			// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
 186:	cc 24       	eor	r12, r12
 188:	c3 94       	inc	r12
 18a:	d1 2c       	mov	r13, r1
 18c:	ce 01       	movw	r24, r28
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	7c 01       	movw	r14, r24
		0b00111100
	};
	
    while (1) 
    {
		for(int i = 0; i < 8; i++)
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	10 e0       	ldi	r17, 0x00	; 0
		{
			// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
 196:	c6 01       	movw	r24, r12
 198:	00 2e       	mov	r0, r16
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <main+0x44>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <main+0x40>
 1a4:	80 95       	com	r24
 1a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LEDMatrix_writeColumn>
			
			// 각 열에 대응하는 스마일 문자 데이터를 출력
			LEDMatrix_writeRow(smile[i]);
 1aa:	f7 01       	movw	r30, r14
 1ac:	81 91       	ld	r24, Z+
 1ae:	7f 01       	movw	r14, r30
 1b0:	0e 94 85 00 	call	0x10a	; 0x10a <LEDMatrix_writeRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x5c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x62>
 1be:	00 00       	nop
		0b00111100
	};
	
    while (1) 
    {
		for(int i = 0; i < 8; i++)
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
 1c4:	08 30       	cpi	r16, 0x08	; 8
 1c6:	11 05       	cpc	r17, r1
 1c8:	31 f7       	brne	.-52     	; 0x196 <main+0x3a>
 1ca:	e0 cf       	rjmp	.-64     	; 0x18c <main+0x30>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
