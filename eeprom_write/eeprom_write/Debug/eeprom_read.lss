
eeprom_read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000546  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000668  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108f  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f0  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dd  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059f  00000000  00000000  00002f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  8e:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:

unsigned char UART_receive(void)				// 1바이트 수신
{
	while( !(UCSR0A & (1<<RXC0)) );				// 데이터 수신 대기
	return UDR0;
}
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <UART_transmit>:

void UART_transmit(unsigned char data)			// 1바이트 송신
{
	while( !(UCSR0A & (1<<UDRE0)) );			// 송신 가능 대기
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <UART_transmit+0x4>
	UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d4:	08 95       	ret

000000d6 <UART_printString>:
}

void UART_printString(char *str)				// 문자열 송신
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	for(int i=0; str[i]; i++)					// '\0' 문자를 만날 때까지 반복
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <UART_printString+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);					// 바이트 단위 출력
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
	UDR0 = data;
}

void UART_printString(char *str)				// 문자열 송신
{
	for(int i=0; str[i]; i++)					// '\0' 문자를 만날 때까지 반복
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <UART_printString+0xe>
	UART_transmit(str[i]);					// 바이트 단위 출력
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <UART_print8bitNumber+0xe>
 102:	00 d0       	rcall	.+0      	; 0x104 <UART_print8bitNumber+0x10>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 108:	20 e3       	ldi	r18, 0x30	; 48
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	1c 82       	std	Y+4, r1	; 0x04
 112:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
 114:	88 23       	and	r24, r24
 116:	19 f1       	breq	.+70     	; 0x15e <UART_print8bitNumber+0x6a>
 118:	fe 01       	movw	r30, r28
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0; no!=0; i++)
		{
			numString[i] = no % 10 + '0';
 120:	4d ec       	ldi	r20, 0xCD	; 205
 122:	01 c0       	rjmp	.+2      	; 0x126 <UART_print8bitNumber+0x32>
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
	{
		for(i=0; no!=0; i++)
 124:	89 01       	movw	r16, r18
		{
			numString[i] = no % 10 + '0';
 126:	84 9f       	mul	r24, r20
 128:	91 2d       	mov	r25, r1
 12a:	11 24       	eor	r1, r1
 12c:	96 95       	lsr	r25
 12e:	96 95       	lsr	r25
 130:	96 95       	lsr	r25
 132:	39 2f       	mov	r19, r25
 134:	33 0f       	add	r19, r19
 136:	23 2f       	mov	r18, r19
 138:	22 0f       	add	r18, r18
 13a:	22 0f       	add	r18, r18
 13c:	23 0f       	add	r18, r19
 13e:	82 1b       	sub	r24, r18
 140:	80 5d       	subi	r24, 0xD0	; 208
 142:	81 93       	st	Z+, r24
			no = no / 10;
 144:	89 2f       	mov	r24, r25
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
	{
		for(i=0; no!=0; i++)
 146:	98 01       	movw	r18, r16
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	91 11       	cpse	r25, r1
 14e:	ea cf       	rjmp	.-44     	; 0x124 <UART_print8bitNumber+0x30>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] ='\0';
 150:	fe 01       	movw	r30, r28
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	11 82       	std	Z+1, r1	; 0x01
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 158:	11 23       	and	r17, r17
 15a:	1c f4       	brge	.+6      	; 0x162 <UART_print8bitNumber+0x6e>
 15c:	11 c0       	rjmp	.+34     	; 0x180 <UART_print8bitNumber+0x8c>
}

void UART_print8bitNumber(uint8_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
	char numString[4] = "0";
	int i, index = 0;
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	80 0f       	add	r24, r16
 166:	91 1f       	adc	r25, r17
 168:	9c 01       	movw	r18, r24
 16a:	2e 5f       	subi	r18, 0xFE	; 254
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	79 01       	movw	r14, r18
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
	UART_transmit(numString[i]);
 170:	f7 01       	movw	r30, r14
 172:	82 91       	ld	r24, -Z
 174:	7f 01       	movw	r14, r30
 176:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
			no = no / 10;
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 17a:	01 50       	subi	r16, 0x01	; 1
 17c:	11 09       	sbc	r17, r1
 17e:	c2 f7       	brpl	.-16     	; 0x170 <UART_print8bitNumber+0x7c>
	UART_transmit(numString[i]);
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <UART_print16bitNumber>:

void UART_print16bitNumber(uint16_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <UART_print16bitNumber+0xe>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <UART_print16bitNumber+0x10>
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <UART_print16bitNumber+0x12>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	ac 01       	movw	r20, r24
	char numString[6] = "0";
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9a 83       	std	Y+2, r25	; 0x02
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	fe 01       	movw	r30, r28
 1b8:	33 96       	adiw	r30, 0x03	; 3
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	df 01       	movw	r26, r30
 1be:	1d 92       	st	X+, r1
 1c0:	8a 95       	dec	r24
 1c2:	e9 f7       	brne	.-6      	; 0x1be <UART_print16bitNumber+0x28>
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
 1c4:	41 15       	cp	r20, r1
 1c6:	51 05       	cpc	r21, r1
 1c8:	b9 f1       	breq	.+110    	; 0x238 <UART_print16bitNumber+0xa2>
 1ca:	32 97       	sbiw	r30, 0x02	; 2
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <UART_print16bitNumber+0x3e>
	{
		for(i=0; no!=0; i++)
 1d2:	8c 01       	movw	r16, r24
		{
			numString[i] = no % 10 + '0';
 1d4:	9a 01       	movw	r18, r20
 1d6:	ad ec       	ldi	r26, 0xCD	; 205
 1d8:	bc ec       	ldi	r27, 0xCC	; 204
 1da:	0e 94 3a 02 	call	0x474	; 0x474 <__umulhisi3>
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	9c 01       	movw	r18, r24
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	82 0f       	add	r24, r18
 1fe:	93 1f       	adc	r25, r19
 200:	9a 01       	movw	r18, r20
 202:	28 1b       	sub	r18, r24
 204:	39 0b       	sbc	r19, r25
 206:	c9 01       	movw	r24, r18
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	81 93       	st	Z+, r24
			no = no / 10;
 20c:	9a 01       	movw	r18, r20
 20e:	0e 94 3a 02 	call	0x474	; 0x474 <__umulhisi3>
 212:	ac 01       	movw	r20, r24
 214:	56 95       	lsr	r21
 216:	47 95       	ror	r20
 218:	56 95       	lsr	r21
 21a:	47 95       	ror	r20
 21c:	56 95       	lsr	r21
 21e:	47 95       	ror	r20
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
	{
		for(i=0; no!=0; i++)
 220:	c8 01       	movw	r24, r16
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	41 15       	cp	r20, r1
 226:	51 05       	cpc	r21, r1
 228:	a1 f6       	brne	.-88     	; 0x1d2 <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] ='\0';
 22a:	fe 01       	movw	r30, r28
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	11 82       	std	Z+1, r1	; 0x01
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 232:	11 23       	and	r17, r17
 234:	1c f4       	brge	.+6      	; 0x23c <UART_print16bitNumber+0xa6>
 236:	10 c0       	rjmp	.+32     	; 0x258 <UART_print16bitNumber+0xc2>
}

void UART_print16bitNumber(uint16_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
	char numString[6] = "0";
	int i, index = 0;
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	80 0f       	add	r24, r16
 240:	91 1f       	adc	r25, r17
 242:	dc 01       	movw	r26, r24
 244:	12 96       	adiw	r26, 0x02	; 2
 246:	7d 01       	movw	r14, r26
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
	UART_transmit(numString[i]);
 248:	f7 01       	movw	r30, r14
 24a:	82 91       	ld	r24, -Z
 24c:	7f 01       	movw	r14, r30
 24e:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
			no = no / 10;
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 252:	01 50       	subi	r16, 0x01	; 1
 254:	11 09       	sbc	r17, r1
 256:	c2 f7       	brpl	.-16     	; 0x248 <UART_print16bitNumber+0xb2>
	UART_transmit(numString[i]);
}
 258:	26 96       	adiw	r28, 0x06	; 6
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	08 95       	ret

00000272 <UART_print32bitNumber>:

void UART_print32bitNumber(uint32_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	2b 97       	sbiw	r28, 0x0b	; 11
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	char numString[11] = "0";
 296:	20 e3       	ldi	r18, 0x30	; 48
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	3a 83       	std	Y+2, r19	; 0x02
 29c:	29 83       	std	Y+1, r18	; 0x01
 29e:	fe 01       	movw	r30, r28
 2a0:	33 96       	adiw	r30, 0x03	; 3
 2a2:	29 e0       	ldi	r18, 0x09	; 9
 2a4:	df 01       	movw	r26, r30
 2a6:	1d 92       	st	X+, r1
 2a8:	2a 95       	dec	r18
 2aa:	e9 f7       	brne	.-6      	; 0x2a6 <UART_print32bitNumber+0x34>
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
 2ac:	61 15       	cp	r22, r1
 2ae:	71 05       	cpc	r23, r1
 2b0:	81 05       	cpc	r24, r1
 2b2:	91 05       	cpc	r25, r1
 2b4:	41 f1       	breq	.+80     	; 0x306 <UART_print32bitNumber+0x94>
 2b6:	32 97       	sbiw	r30, 0x02	; 2
 2b8:	7f 01       	movw	r14, r30
 2ba:	00 e0       	ldi	r16, 0x00	; 0
 2bc:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0; no!=0; i++)
		{
			numString[i] = no % 10 + '0';
 2be:	0f 2e       	mov	r0, r31
 2c0:	fa e0       	ldi	r31, 0x0A	; 10
 2c2:	8f 2e       	mov	r8, r31
 2c4:	91 2c       	mov	r9, r1
 2c6:	a1 2c       	mov	r10, r1
 2c8:	b1 2c       	mov	r11, r1
 2ca:	f0 2d       	mov	r31, r0
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <UART_print32bitNumber+0x5e>
	char numString[11] = "0";
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
	{
		for(i=0; no!=0; i++)
 2ce:	89 01       	movw	r16, r18
		{
			numString[i] = no % 10 + '0';
 2d0:	a5 01       	movw	r20, r10
 2d2:	94 01       	movw	r18, r8
 2d4:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodsi4>
 2d8:	60 5d       	subi	r22, 0xD0	; 208
 2da:	d7 01       	movw	r26, r14
 2dc:	6d 93       	st	X+, r22
 2de:	7d 01       	movw	r14, r26
			no = no / 10;
 2e0:	62 2f       	mov	r22, r18
 2e2:	73 2f       	mov	r23, r19
 2e4:	84 2f       	mov	r24, r20
 2e6:	95 2f       	mov	r25, r21
	char numString[11] = "0";
	int i, index = 0;
	
	if(no > 0)									// 문자열 변환
	{
		for(i=0; no!=0; i++)
 2e8:	98 01       	movw	r18, r16
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	61 15       	cp	r22, r1
 2f0:	71 05       	cpc	r23, r1
 2f2:	81 05       	cpc	r24, r1
 2f4:	91 05       	cpc	r25, r1
 2f6:	59 f7       	brne	.-42     	; 0x2ce <UART_print32bitNumber+0x5c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] ='\0';
 2f8:	fe 01       	movw	r30, r28
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	11 82       	std	Z+1, r1	; 0x01
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 300:	11 23       	and	r17, r17
 302:	1c f4       	brge	.+6      	; 0x30a <UART_print32bitNumber+0x98>
 304:	10 c0       	rjmp	.+32     	; 0x326 <UART_print32bitNumber+0xb4>
}

void UART_print32bitNumber(uint32_t no)			// 숫자를 문자열로 변환하여 송신, 8비트
{
	char numString[11] = "0";
	int i, index = 0;
 306:	00 e0       	ldi	r16, 0x00	; 0
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	ce 01       	movw	r24, r28
 30c:	80 0f       	add	r24, r16
 30e:	91 1f       	adc	r25, r17
 310:	fc 01       	movw	r30, r24
 312:	32 96       	adiw	r30, 0x02	; 2
 314:	7f 01       	movw	r14, r30
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
	UART_transmit(numString[i]);
 316:	d7 01       	movw	r26, r14
 318:	8e 91       	ld	r24, -X
 31a:	7d 01       	movw	r14, r26
 31c:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
			no = no / 10;
		}
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
 320:	01 50       	subi	r16, 0x01	; 1
 322:	11 09       	sbc	r17, r1
 324:	c2 f7       	brpl	.-16     	; 0x316 <UART_print32bitNumber+0xa4>
	UART_transmit(numString[i]);
}
 326:	2b 96       	adiw	r28, 0x0b	; 11
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	8f 90       	pop	r8
 346:	08 95       	ret

00000348 <main>:

int main(void)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <main+0x6>
 34e:	00 d0       	rcall	.+0      	; 0x350 <main+0x8>
 350:	00 d0       	rcall	.+0      	; 0x352 <main+0xa>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
    // EEPROM에 쓸 데이터
	uint8_t dataByte = 1;
	uint16_t dataWord = 2;
	uint32_t dataDWord = 3;
	char dataString[] = "ABCDE";
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	e2 e3       	ldi	r30, 0x32	; 50
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	de 01       	movw	r26, r28
 35e:	11 96       	adiw	r26, 0x01	; 1
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	8a 95       	dec	r24
 366:	e1 f7       	brne	.-8      	; 0x360 <main+0x18>
	
	// EEPROM의 주소
	int addressByte = 0, addressWord = 10, addressDWord = 20, addressString = 30;
	
	UART_INIT();		// UART 통신 초기화
 368:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	
	// 데이터 쓰기
	eeprom_update_byte( (uint8_t *)addressByte, dataByte * 10);
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 7d 02 	call	0x4fa	; 0x4fa <eeprom_update_byte>
	eeprom_update_word( (uint16_t *)addressWord, dataWord * 10);
 376:	64 e1       	ldi	r22, 0x14	; 20
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 9b 02 	call	0x536	; 0x536 <eeprom_update_word>
	eeprom_update_dword( (uint32_t *)addressDWord, dataDWord * 10);
 382:	4e e1       	ldi	r20, 0x1E	; 30
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	84 e1       	ldi	r24, 0x14	; 20
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 8f 02 	call	0x51e	; 0x51e <eeprom_update_dword>
	eeprom_update_block( (void *)dataString, (void *)addressString, 5);
 392:	45 e0       	ldi	r20, 0x05	; 5
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	6e e1       	ldi	r22, 0x1E	; 30
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	0e 94 6d 02 	call	0x4da	; 0x4da <eeprom_update_block>
	
	// 데이터 읽기
	dataByte = eeprom_read_byte( (uint8_t *)addressByte );
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <eeprom_read_byte>
 3aa:	b8 2e       	mov	r11, r24
	dataWord = eeprom_read_word( (uint16_t *)addressWord );
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 67 02 	call	0x4ce	; 0x4ce <eeprom_read_word>
 3b4:	8c 01       	movw	r16, r24
	dataDWord = eeprom_read_dword( (uint32_t *)addressDWord );
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 61 02 	call	0x4c2	; 0x4c2 <eeprom_read_dword>
 3be:	6b 01       	movw	r12, r22
 3c0:	7c 01       	movw	r14, r24
	eeprom_read_block( (void *)dataString, (void *)addressString, 5);
 3c2:	45 e0       	ldi	r20, 0x05	; 5
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	6e e1       	ldi	r22, 0x1E	; 30
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 49 02 	call	0x492	; 0x492 <eeprom_read_block>
	
	// UART 통신으로 데이터 전송
	UART_printString("Byte      : ");		// 1바이트 데이터
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print8bitNumber(dataByte);
 3da:	8b 2d       	mov	r24, r11
 3dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print8bitNumber>
	UART_printString("\n");
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("Word      : ");		// 2바이트 데이터
 3e8:	86 e1       	ldi	r24, 0x16	; 22
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print16bitNumber(dataWord);
 3f0:	c8 01       	movw	r24, r16
 3f2:	0e 94 cb 00 	call	0x196	; 0x196 <UART_print16bitNumber>
	UART_printString("\n");
 3f6:	8d e0       	ldi	r24, 0x0D	; 13
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("Double Word      : ");		// 4바이트 데이터
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print32bitNumber(dataDWord);
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	0e 94 39 01 	call	0x272	; 0x272 <UART_print32bitNumber>
	UART_printString("\n");
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("String      : ");		// 문자열 데이터
 416:	83 e2       	ldi	r24, 0x23	; 35
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString(dataString);
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("\n");
 426:	8d e0       	ldi	r24, 0x0D	; 13
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

00000430 <__udivmodsi4>:
 430:	a1 e2       	ldi	r26, 0x21	; 33
 432:	1a 2e       	mov	r1, r26
 434:	aa 1b       	sub	r26, r26
 436:	bb 1b       	sub	r27, r27
 438:	fd 01       	movw	r30, r26
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__udivmodsi4_ep>

0000043c <__udivmodsi4_loop>:
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	ee 1f       	adc	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	a2 17       	cp	r26, r18
 446:	b3 07       	cpc	r27, r19
 448:	e4 07       	cpc	r30, r20
 44a:	f5 07       	cpc	r31, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__udivmodsi4_ep>
 44e:	a2 1b       	sub	r26, r18
 450:	b3 0b       	sbc	r27, r19
 452:	e4 0b       	sbc	r30, r20
 454:	f5 0b       	sbc	r31, r21

00000456 <__udivmodsi4_ep>:
 456:	66 1f       	adc	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a 94       	dec	r1
 460:	69 f7       	brne	.-38     	; 0x43c <__udivmodsi4_loop>
 462:	60 95       	com	r22
 464:	70 95       	com	r23
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	9b 01       	movw	r18, r22
 46c:	ac 01       	movw	r20, r24
 46e:	bd 01       	movw	r22, r26
 470:	cf 01       	movw	r24, r30
 472:	08 95       	ret

00000474 <__umulhisi3>:
 474:	a2 9f       	mul	r26, r18
 476:	b0 01       	movw	r22, r0
 478:	b3 9f       	mul	r27, r19
 47a:	c0 01       	movw	r24, r0
 47c:	a3 9f       	mul	r26, r19
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	b2 9f       	mul	r27, r18
 488:	70 0d       	add	r23, r0
 48a:	81 1d       	adc	r24, r1
 48c:	11 24       	eor	r1, r1
 48e:	91 1d       	adc	r25, r1
 490:	08 95       	ret

00000492 <eeprom_read_block>:
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22

00000496 <eeprom_read_blraw>:
 496:	fc 01       	movw	r30, r24
 498:	f9 99       	sbic	0x1f, 1	; 31
 49a:	fe cf       	rjmp	.-4      	; 0x498 <eeprom_read_blraw+0x2>
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <eeprom_read_blraw+0x14>
 49e:	f2 bd       	out	0x22, r31	; 34
 4a0:	e1 bd       	out	0x21, r30	; 33
 4a2:	f8 9a       	sbi	0x1f, 0	; 31
 4a4:	31 96       	adiw	r30, 0x01	; 1
 4a6:	00 b4       	in	r0, 0x20	; 32
 4a8:	0d 92       	st	X+, r0
 4aa:	41 50       	subi	r20, 0x01	; 1
 4ac:	50 40       	sbci	r21, 0x00	; 0
 4ae:	b8 f7       	brcc	.-18     	; 0x49e <eeprom_read_blraw+0x8>
 4b0:	08 95       	ret

000004b2 <eeprom_read_byte>:
 4b2:	f9 99       	sbic	0x1f, 1	; 31
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <eeprom_read_byte>
 4b6:	92 bd       	out	0x22, r25	; 34
 4b8:	81 bd       	out	0x21, r24	; 33
 4ba:	f8 9a       	sbi	0x1f, 0	; 31
 4bc:	99 27       	eor	r25, r25
 4be:	80 b5       	in	r24, 0x20	; 32
 4c0:	08 95       	ret

000004c2 <eeprom_read_dword>:
 4c2:	a6 e1       	ldi	r26, 0x16	; 22
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	44 e0       	ldi	r20, 0x04	; 4
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	0c 94 4b 02 	jmp	0x496	; 0x496 <eeprom_read_blraw>

000004ce <eeprom_read_word>:
 4ce:	a8 e1       	ldi	r26, 0x18	; 24
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	42 e0       	ldi	r20, 0x02	; 2
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0c 94 4b 02 	jmp	0x496	; 0x496 <eeprom_read_blraw>

000004da <eeprom_update_block>:
 4da:	dc 01       	movw	r26, r24
 4dc:	a4 0f       	add	r26, r20
 4de:	b5 1f       	adc	r27, r21
 4e0:	41 50       	subi	r20, 0x01	; 1
 4e2:	50 40       	sbci	r21, 0x00	; 0
 4e4:	48 f0       	brcs	.+18     	; 0x4f8 <eeprom_update_block+0x1e>
 4e6:	cb 01       	movw	r24, r22
 4e8:	84 0f       	add	r24, r20
 4ea:	95 1f       	adc	r25, r21
 4ec:	2e 91       	ld	r18, -X
 4ee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <eeprom_update_r18>
 4f2:	41 50       	subi	r20, 0x01	; 1
 4f4:	50 40       	sbci	r21, 0x00	; 0
 4f6:	d0 f7       	brcc	.-12     	; 0x4ec <eeprom_update_block+0x12>
 4f8:	08 95       	ret

000004fa <eeprom_update_byte>:
 4fa:	26 2f       	mov	r18, r22

000004fc <eeprom_update_r18>:
 4fc:	f9 99       	sbic	0x1f, 1	; 31
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <eeprom_update_r18>
 500:	92 bd       	out	0x22, r25	; 34
 502:	81 bd       	out	0x21, r24	; 33
 504:	f8 9a       	sbi	0x1f, 0	; 31
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	00 b4       	in	r0, 0x20	; 32
 50a:	02 16       	cp	r0, r18
 50c:	39 f0       	breq	.+14     	; 0x51c <eeprom_update_r18+0x20>
 50e:	1f ba       	out	0x1f, r1	; 31
 510:	20 bd       	out	0x20, r18	; 32
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	fa 9a       	sbi	0x1f, 2	; 31
 518:	f9 9a       	sbi	0x1f, 1	; 31
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	08 95       	ret

0000051e <eeprom_update_dword>:
 51e:	03 96       	adiw	r24, 0x03	; 3
 520:	27 2f       	mov	r18, r23
 522:	0e 94 7e 02 	call	0x4fc	; 0x4fc <eeprom_update_r18>
 526:	0e 94 7d 02 	call	0x4fa	; 0x4fa <eeprom_update_byte>
 52a:	25 2f       	mov	r18, r21
 52c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <eeprom_update_r18>
 530:	24 2f       	mov	r18, r20
 532:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <eeprom_update_r18>

00000536 <eeprom_update_word>:
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	27 2f       	mov	r18, r23
 53a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <eeprom_update_r18>
 53e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <eeprom_update_byte>

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
