
keyMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000324  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091e  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000789  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ea  00000000  00000000  00001d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <InitKeyMatrix>:

unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );			// 데이터 수신 대기
	return UDR0;
}
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8f 73       	andi	r24, 0x3F	; 63
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	83 7c       	andi	r24, 0xC3	; 195
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	08 95       	ret

000000b4 <UART_INIT>:
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
  be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c8:	e2 ec       	ldi	r30, 0xC2	; 194
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	80 83       	st	Z, r24
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <UART_transmit>:

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );		// 송신 가능 대기
  e4:	e0 ec       	ldi	r30, 0xC0	; 192
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	95 ff       	sbrs	r25, 5
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <UART_transmit+0x4>
	UDR0 = data;							// 데이터 전송
  ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  f2:	08 95       	ret

000000f4 <UART_transmit_string>:
}

void UART_transmit_string(char *str)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
	while(*str)		// 문자열의 끝 검사
  fa:	88 81       	ld	r24, Y
  fc:	88 23       	and	r24, r24
  fe:	31 f0       	breq	.+12     	; 0x10c <UART_transmit_string+0x18>
 100:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_transmit(*str);		// 문자 단위 전송
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
	UDR0 = data;							// 데이터 전송
}

void UART_transmit_string(char *str)
{
	while(*str)		// 문자열의 끝 검사
 106:	89 91       	ld	r24, Y+
 108:	81 11       	cpse	r24, r1
 10a:	fb cf       	rjmp	.-10     	; 0x102 <UART_transmit_string+0xe>
	{
		UART_transmit(*str);		// 문자 단위 전송
		str++;
	}
	
	UART_transmit('\n');		// 줄바꿈 문자 추가
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <main>:


int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	64 97       	sbiw	r28, 0x14	; 20
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
    uint8_t keyPressed[ROWS][COLS];		// 키 상태 저장
	uint8_t row, col, count;
	
	UART_INIT();			// UART 통신 초기화
 12c:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_INIT>
	InitKeyMatrix();		// 키 매트릭스 연결 초기화
 130:	0e 94 4b 00 	call	0x96	; 0x96 <InitKeyMatrix>
    {
		count = 0;			// 눌려진 버튼의 개수	
		
		for(col = 0; col < COLS; col++)
		{
			DDRD |= (1 << colPins[col]);		// 해당 COL을 출력으로 설정
 134:	01 e0       	ldi	r16, 0x01	; 1
 136:	10 e0       	ldi	r17, 0x00	; 0
			PORTD |= ~(1 << colPins[col]);		// 해당 COL에 LOW 출력
			_delay_ms(3);						// 출력 안정화
			
			// LOW의 입력 읽기 : LOW인 경우 버튼이 눌러진 상태
			keyPressed[0][col] = 1 - ((PINB & (1 << rowPins[0])) >> rowPins[0]);
 138:	0f 2e       	mov	r0, r31
 13a:	f4 e0       	ldi	r31, 0x04	; 4
 13c:	ef 2e       	mov	r14, r31
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	ff 2e       	mov	r15, r31
 142:	f0 2d       	mov	r31, r0
 144:	dd 24       	eor	r13, r13
 146:	d3 94       	inc	r13
 148:	ce 01       	movw	r24, r28
 14a:	41 96       	adiw	r24, 0x11	; 17
 14c:	9a 8b       	std	Y+18, r25	; 0x12
 14e:	89 8b       	std	Y+17, r24	; 0x11
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	de 01       	movw	r26, r28
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	3d 01       	movw	r6, r26
	UART_transmit('\n');		// 줄바꿈 문자 추가
}


int main(void)
{
 15a:	ab 01       	movw	r20, r22
 15c:	fd 01       	movw	r30, r26
 15e:	9b 01       	movw	r18, r22
 160:	7c 8b       	std	Y+20, r23	; 0x14
 162:	6b 8b       	std	Y+19, r22	; 0x13
 164:	68 94       	set
 166:	99 24       	eor	r9, r9
 168:	92 f8       	bld	r9, 2
	UART_INIT();			// UART 통신 초기화
	InitKeyMatrix();		// 키 매트릭스 연결 초기화
	
    while (1) 
    {
		count = 0;			// 눌려진 버튼의 개수	
 16a:	41 2c       	mov	r4, r1
		
		for(col = 0; col < COLS; col++)
		{
			DDRD |= (1 << colPins[col]);		// 해당 COL을 출력으로 설정
 16c:	ca b0       	in	r12, 0x0a	; 10
 16e:	ab 89       	ldd	r26, Y+19	; 0x13
 170:	bc 89       	ldd	r27, Y+20	; 0x14
 172:	c8 01       	movw	r24, r16
 174:	0d 90       	ld	r0, X+
 176:	02 c0       	rjmp	.+4      	; 0x17c <main+0x64>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <main+0x60>
 180:	bc 8b       	std	Y+20, r27	; 0x14
 182:	ab 8b       	std	Y+19, r26	; 0x13
 184:	8c 29       	or	r24, r12
 186:	8a b9       	out	0x0a, r24	; 10
			PORTD |= ~(1 << colPins[col]);		// 해당 COL에 LOW 출력
 188:	cb b0       	in	r12, 0x0b	; 11
 18a:	d9 01       	movw	r26, r18
 18c:	c8 01       	movw	r24, r16
 18e:	0d 90       	ld	r0, X+
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x7e>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <main+0x7a>
 19a:	9d 01       	movw	r18, r26
 19c:	80 95       	com	r24
 19e:	8c 29       	or	r24, r12
 1a0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f ed       	ldi	r24, 0xDF	; 223
 1a4:	9e e2       	ldi	r25, 0x2E	; 46
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x8e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x94>
 1ac:	00 00       	nop
			_delay_ms(3);						// 출력 안정화
			
			// LOW의 입력 읽기 : LOW인 경우 버튼이 눌러진 상태
			keyPressed[0][col] = 1 - ((PINB & (1 << rowPins[0])) >> rowPins[0]);
 1ae:	83 b1       	in	r24, 0x03	; 3
 1b0:	d7 01       	movw	r26, r14
 1b2:	cc 90       	ld	r12, X
 1b4:	58 01       	movw	r10, r16
 1b6:	0c 2c       	mov	r0, r12
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0xa6>
 1ba:	aa 0c       	add	r10, r10
 1bc:	bb 1c       	adc	r11, r11
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <main+0xa2>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	8a 21       	and	r24, r10
 1c6:	9b 21       	and	r25, r11
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0xb6>
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	ca 94       	dec	r12
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <main+0xb2>
 1d2:	8d 2c       	mov	r8, r13
 1d4:	88 1a       	sub	r8, r24
 1d6:	80 82       	st	Z, r8
			keyPressed[1][col] = 1 - ((PINB & (1 << rowPins[1])) >> rowPins[1]);
 1d8:	83 b1       	in	r24, 0x03	; 3
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	cc 90       	ld	r12, X
 1de:	11 97       	sbiw	r26, 0x01	; 1
 1e0:	58 01       	movw	r10, r16
 1e2:	0c 2c       	mov	r0, r12
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <main+0xd2>
 1e6:	aa 0c       	add	r10, r10
 1e8:	bb 1c       	adc	r11, r11
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <main+0xce>
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	8a 21       	and	r24, r10
 1f2:	9b 21       	and	r25, r11
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0xe2>
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	ca 94       	dec	r12
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <main+0xde>
 1fe:	cd 2c       	mov	r12, r13
 200:	c8 1a       	sub	r12, r24
 202:	c4 82       	std	Z+4, r12	; 0x04
			keyPressed[2][col] = 1 - ((PINB & (1 << rowPins[2])) >> rowPins[2]);
 204:	83 b1       	in	r24, 0x03	; 3
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	5c 90       	ld	r5, X
 20a:	12 97       	sbiw	r26, 0x02	; 2
 20c:	58 01       	movw	r10, r16
 20e:	05 2c       	mov	r0, r5
 210:	02 c0       	rjmp	.+4      	; 0x216 <main+0xfe>
 212:	aa 0c       	add	r10, r10
 214:	bb 1c       	adc	r11, r11
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <main+0xfa>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	8a 21       	and	r24, r10
 21e:	9b 21       	and	r25, r11
 220:	02 c0       	rjmp	.+4      	; 0x226 <main+0x10e>
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	5a 94       	dec	r5
 228:	e2 f7       	brpl	.-8      	; 0x222 <main+0x10a>
 22a:	5d 2c       	mov	r5, r13
 22c:	58 1a       	sub	r5, r24
 22e:	50 86       	std	Z+8, r5	; 0x08
			keyPressed[3][col] = 1 - ((PINB & (1 << rowPins[3])) >> rowPins[3]);
 230:	83 b1       	in	r24, 0x03	; 3
 232:	13 96       	adiw	r26, 0x03	; 3
 234:	3c 90       	ld	r3, X
 236:	58 01       	movw	r10, r16
 238:	03 2c       	mov	r0, r3
 23a:	02 c0       	rjmp	.+4      	; 0x240 <main+0x128>
 23c:	aa 0c       	add	r10, r10
 23e:	bb 1c       	adc	r11, r11
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <main+0x124>
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	8a 21       	and	r24, r10
 248:	9b 21       	and	r25, r11
 24a:	02 c0       	rjmp	.+4      	; 0x250 <main+0x138>
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	3a 94       	dec	r3
 252:	e2 f7       	brpl	.-8      	; 0x24c <main+0x134>
 254:	bd 2d       	mov	r27, r13
 256:	b8 1b       	sub	r27, r24
 258:	8b 2f       	mov	r24, r27
 25a:	b4 87       	std	Z+12, r27	; 0x0c
			
			for(row = 0; row < ROWS; row++)		// 눌러진 버튼 개수 읽기
			{
				count += keyPressed[row][col];
 25c:	8c 0c       	add	r8, r12
 25e:	58 0c       	add	r5, r8
 260:	85 0d       	add	r24, r5
 262:	48 0e       	add	r4, r24
			}
			
			PORTD |= (1 << colPins[col]);		// 해당 COL에 HIGH 출력
 264:	cb b0       	in	r12, 0x0b	; 11
 266:	da 01       	movw	r26, r20
 268:	c8 01       	movw	r24, r16
 26a:	0d 90       	ld	r0, X+
 26c:	02 c0       	rjmp	.+4      	; 0x272 <main+0x15a>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <main+0x156>
 276:	ad 01       	movw	r20, r26
 278:	8c 29       	or	r24, r12
 27a:	8b b9       	out	0x0b, r24	; 11
			DDRD &= ~(1 << colPins[col]);		// 입력으로 (하이 임피던스 상태) 설정
 27c:	ca b0       	in	r12, 0x0a	; 10
 27e:	db 01       	movw	r26, r22
 280:	c8 01       	movw	r24, r16
 282:	0d 90       	ld	r0, X+
 284:	02 c0       	rjmp	.+4      	; 0x28a <main+0x172>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <main+0x16e>
 28e:	bd 01       	movw	r22, r26
 290:	80 95       	com	r24
 292:	8c 21       	and	r24, r12
 294:	8a b9       	out	0x0a, r24	; 10
 296:	9a 94       	dec	r9
 298:	31 96       	adiw	r30, 0x01	; 1
	
    while (1) 
    {
		count = 0;			// 눌려진 버튼의 개수	
		
		for(col = 0; col < COLS; col++)
 29a:	91 10       	cpse	r9, r1
 29c:	67 cf       	rjmp	.-306    	; 0x16c <main+0x54>
			
			PORTD |= (1 << colPins[col]);		// 해당 COL에 HIGH 출력
			DDRD &= ~(1 << colPins[col]);		// 입력으로 (하이 임피던스 상태) 설정
		}
		
		if(count > 0)							// 버튼이 눌러진 경우만 UART로 출력
 29e:	44 20       	and	r4, r4
 2a0:	a9 f1       	breq	.+106    	; 0x30c <main+0x1f4>
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f8 e0       	ldi	r31, 0x08	; 8
 2a6:	4f 2e       	mov	r4, r31
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	5f 2e       	mov	r5, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	25 c0       	rjmp	.+74     	; 0x2fa <main+0x1e2>
		{
			for(row = 0; row < ROWS; row++)
			{
				for(col = 0; col < COLS; col++)
				{
					if(keyPressed[row][col])
 2b0:	f4 01       	movw	r30, r8
 2b2:	81 91       	ld	r24, Z+
 2b4:	4f 01       	movw	r8, r30
 2b6:	88 23       	and	r24, r24
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <main+0x1ac>
						UART_transmit(keys[row][col]);
 2ba:	d5 01       	movw	r26, r10
 2bc:	8c 91       	ld	r24, X
 2be:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <main+0x1b2>
					else
						UART_transmit('.');
 2c4:	8e e2       	ldi	r24, 0x2E	; 46
 2c6:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
					
					UART_transmit_string(" ");
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_transmit_string>
 2d2:	ca 94       	dec	r12
 2d4:	bf ef       	ldi	r27, 0xFF	; 255
 2d6:	ab 1a       	sub	r10, r27
 2d8:	bb 0a       	sbc	r11, r27
		
		if(count > 0)							// 버튼이 눌러진 경우만 UART로 출력
		{
			for(row = 0; row < ROWS; row++)
			{
				for(col = 0; col < COLS; col++)
 2da:	c1 10       	cpse	r12, r1
 2dc:	e9 cf       	rjmp	.-46     	; 0x2b0 <main+0x198>
					else
						UART_transmit('.');
					
					UART_transmit_string(" ");
				}
				UART_transmit('\n');
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
 2e4:	e4 e0       	ldi	r30, 0x04	; 4
 2e6:	6e 0e       	add	r6, r30
 2e8:	71 1c       	adc	r7, r1
 2ea:	f4 e0       	ldi	r31, 0x04	; 4
 2ec:	4f 0e       	add	r4, r31
 2ee:	51 1c       	adc	r5, r1
			DDRD &= ~(1 << colPins[col]);		// 입력으로 (하이 임피던스 상태) 설정
		}
		
		if(count > 0)							// 버튼이 눌러진 경우만 UART로 출력
		{
			for(row = 0; row < ROWS; row++)
 2f0:	89 89       	ldd	r24, Y+17	; 0x11
 2f2:	9a 89       	ldd	r25, Y+18	; 0x12
 2f4:	86 15       	cp	r24, r6
 2f6:	97 05       	cpc	r25, r7
 2f8:	31 f0       	breq	.+12     	; 0x306 <main+0x1ee>
	UART_INIT();			// UART 통신 초기화
	InitKeyMatrix();		// 키 매트릭스 연결 초기화
	
    while (1) 
    {
		count = 0;			// 눌려진 버튼의 개수	
 2fa:	52 01       	movw	r10, r4
 2fc:	43 01       	movw	r8, r6
 2fe:	68 94       	set
 300:	cc 24       	eor	r12, r12
 302:	c2 f8       	bld	r12, 2
 304:	d5 cf       	rjmp	.-86     	; 0x2b0 <main+0x198>
					
					UART_transmit_string(" ");
				}
				UART_transmit('\n');
			}
			UART_transmit('\n');
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	a3 ed       	ldi	r26, 0xD3	; 211
 310:	b0 e3       	ldi	r27, 0x30	; 48
 312:	91 50       	subi	r25, 0x01	; 1
 314:	a0 40       	sbci	r26, 0x00	; 0
 316:	b0 40       	sbci	r27, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x1fa>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x204>
 31c:	00 00       	nop
 31e:	18 cf       	rjmp	.-464    	; 0x150 <main+0x38>

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
