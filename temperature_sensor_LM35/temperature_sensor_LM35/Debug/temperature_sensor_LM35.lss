
temperature_sensor_LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087b  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076a  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000396  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001df  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  78:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:
#define  F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24

	UBRR0H = 0x00;
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	UCSR0C |= 0x06;
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <UART_transmit+0x4>
	UDR0 = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  be:	08 95       	ret

000000c0 <UART_print16bitNumber>:
}

void UART_print16bitNumber(uint16_t no)
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <UART_print16bitNumber+0xe>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <UART_print16bitNumber+0x10>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <UART_print16bitNumber+0x12>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	ac 01       	movw	r20, r24
	char numString[6] = "0";
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	fe 01       	movw	r30, r28
  e2:	33 96       	adiw	r30, 0x03	; 3
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	df 01       	movw	r26, r30
  e8:	1d 92       	st	X+, r1
  ea:	8a 95       	dec	r24
  ec:	e9 f7       	brne	.-6      	; 0xe8 <UART_print16bitNumber+0x28>
	int i, index = 0;
	
	if(no > 0){
  ee:	41 15       	cp	r20, r1
  f0:	51 05       	cpc	r21, r1
  f2:	b9 f1       	breq	.+110    	; 0x162 <UART_print16bitNumber+0xa2>
  f4:	32 97       	sbiw	r30, 0x02	; 2
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	01 c0       	rjmp	.+2      	; 0xfe <UART_print16bitNumber+0x3e>
		for(i = 0; no != 0 ; i++)
  fc:	8c 01       	movw	r16, r24
		{
			numString[i] = no % 10 + '0';
  fe:	9a 01       	movw	r18, r20
 100:	ad ec       	ldi	r26, 0xCD	; 205
 102:	bc ec       	ldi	r27, 0xCC	; 204
 104:	0e 94 c6 02 	call	0x58c	; 0x58c <__umulhisi3>
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	9c 01       	movw	r18, r24
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	82 0f       	add	r24, r18
 128:	93 1f       	adc	r25, r19
 12a:	9a 01       	movw	r18, r20
 12c:	28 1b       	sub	r18, r24
 12e:	39 0b       	sbc	r19, r25
 130:	c9 01       	movw	r24, r18
 132:	80 5d       	subi	r24, 0xD0	; 208
 134:	81 93       	st	Z+, r24
			no = no / 10;
 136:	9a 01       	movw	r18, r20
 138:	0e 94 c6 02 	call	0x58c	; 0x58c <__umulhisi3>
 13c:	ac 01       	movw	r20, r24
 13e:	56 95       	lsr	r21
 140:	47 95       	ror	r20
 142:	56 95       	lsr	r21
 144:	47 95       	ror	r20
 146:	56 95       	lsr	r21
 148:	47 95       	ror	r20
{
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 14a:	c8 01       	movw	r24, r16
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	41 15       	cp	r20, r1
 150:	51 05       	cpc	r21, r1
 152:	a1 f6       	brne	.-88     	; 0xfc <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 154:	fe 01       	movw	r30, r28
 156:	e8 0f       	add	r30, r24
 158:	f9 1f       	adc	r31, r25
 15a:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 15c:	11 23       	and	r17, r17
 15e:	1c f4       	brge	.+6      	; 0x166 <UART_print16bitNumber+0xa6>
 160:	10 c0       	rjmp	.+32     	; 0x182 <UART_print16bitNumber+0xc2>
}

void UART_print16bitNumber(uint16_t no)
{
	char numString[6] = "0";
	int i, index = 0;
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	ce 01       	movw	r24, r28
 168:	80 0f       	add	r24, r16
 16a:	91 1f       	adc	r25, r17
 16c:	dc 01       	movw	r26, r24
 16e:	12 96       	adiw	r26, 0x02	; 2
 170:	7d 01       	movw	r14, r26
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
 172:	f7 01       	movw	r30, r14
 174:	82 91       	ld	r24, -Z
 176:	7f 01       	movw	r14, r30
 178:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 17c:	01 50       	subi	r16, 0x01	; 1
 17e:	11 09       	sbc	r17, r1
 180:	c2 f7       	brpl	.-16     	; 0x172 <UART_print16bitNumber+0xb2>
	UART_transmit(numString[i]);
}
 182:	26 96       	adiw	r28, 0x06	; 6
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <ADC_INIT>:

void ADC_INIT(unsigned char channel)
{
	ADMUX |= 0x40; 			// AVCC를 기준 전압으로 선택
 19c:	ac e7       	ldi	r26, 0x7C	; 124
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	9c 91       	ld	r25, X
 1a2:	90 64       	ori	r25, 0x40	; 64
 1a4:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;			// 분주비 설정
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	97 60       	ori	r25, 0x07	; 7
 1ae:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);		// ADC 활성화
 1b0:	90 81       	ld	r25, Z
 1b2:	90 68       	ori	r25, 0x80	; 128
 1b4:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);		// 자동 트리거 모드
 1b6:	90 81       	ld	r25, Z
 1b8:	90 62       	ori	r25, 0x20	; 32
 1ba:	90 83       	st	Z, r25

	ADMUX |= ((ADMUX & 0xE0) | channel);	// 채널 선택
 1bc:	9c 91       	ld	r25, X
 1be:	2c 91       	ld	r18, X
 1c0:	90 7e       	andi	r25, 0xE0	; 224
 1c2:	89 2b       	or	r24, r25
 1c4:	82 2b       	or	r24, r18
 1c6:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);		// 변환 시작
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	84 ff       	sbrs	r24, 4
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <read_ADC+0x4>
	
	return ADC;				// 10비트 값을 반환
 1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 1e2:	08 95       	ret

000001e4 <main>:
int main(void)
{
    int read;
	float input_voltage, temperature;
	
	UART_INIT();		// UART 통신 초기화
 1e4:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
	ADC_INIT(1);		// AD 변환기 초기화
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 ce 00 	call	0x19c	; 0x19c <ADC_INIT>
	
    while (1) 
    {
		// 온도 센서의 출력 전압을 ADC를 거쳐 읽는다.
		read = read_ADC();
 1ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <read_ADC>
		input_voltage = read * 5.0 / 1023.0;
		
		// 10mV에 1℃이므로 100을 곱해서 현재 온도를 얻는다.
		temperature = input_voltage * 100.0;
		
		UART_print16bitNumber((int)temperature);		// 정수값으로 출력
 1f2:	bc 01       	movw	r22, r24
 1f4:	99 0f       	add	r25, r25
 1f6:	88 0b       	sbc	r24, r24
 1f8:	99 0b       	sbc	r25, r25
 1fa:	0e 94 cd 01 	call	0x39a	; 0x39a <__floatsisf>
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 ea       	ldi	r20, 0xA0	; 160
 204:	50 e4       	ldi	r21, 0x40	; 64
 206:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__mulsf3>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 ec       	ldi	r19, 0xC0	; 192
 20e:	4f e7       	ldi	r20, 0x7F	; 127
 210:	54 e4       	ldi	r21, 0x44	; 68
 212:	0e 94 23 01 	call	0x246	; 0x246 <__divsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	48 ec       	ldi	r20, 0xC8	; 200
 21c:	52 e4       	ldi	r21, 0x42	; 66
 21e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__mulsf3>
 222:	0e 94 95 01 	call	0x32a	; 0x32a <__fixsfsi>
 226:	cb 01       	movw	r24, r22
 228:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_print16bitNumber>
		UART_transmit('\n');						// 줄바꿈
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	83 ed       	ldi	r24, 0xD3	; 211
 236:	90 e3       	ldi	r25, 0x30	; 48
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x54>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x5e>
 242:	00 00       	nop
 244:	d4 cf       	rjmp	.-88     	; 0x1ee <main+0xa>

00000246 <__divsf3>:
 246:	0e 94 37 01 	call	0x26e	; 0x26e <__divsf3x>
 24a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_round>
 24e:	0e 94 18 02 	call	0x430	; 0x430 <__fp_pscB>
 252:	58 f0       	brcs	.+22     	; 0x26a <__divsf3+0x24>
 254:	0e 94 11 02 	call	0x422	; 0x422 <__fp_pscA>
 258:	40 f0       	brcs	.+16     	; 0x26a <__divsf3+0x24>
 25a:	29 f4       	brne	.+10     	; 0x266 <__divsf3+0x20>
 25c:	5f 3f       	cpi	r21, 0xFF	; 255
 25e:	29 f0       	breq	.+10     	; 0x26a <__divsf3+0x24>
 260:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 264:	51 11       	cpse	r21, r1
 266:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>
 26a:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_nan>

0000026e <__divsf3x>:
 26e:	0e 94 30 02 	call	0x460	; 0x460 <__fp_split3>
 272:	68 f3       	brcs	.-38     	; 0x24e <__divsf3+0x8>

00000274 <__divsf3_pse>:
 274:	99 23       	and	r25, r25
 276:	b1 f3       	breq	.-20     	; 0x264 <__divsf3+0x1e>
 278:	55 23       	and	r21, r21
 27a:	91 f3       	breq	.-28     	; 0x260 <__divsf3+0x1a>
 27c:	95 1b       	sub	r25, r21
 27e:	55 0b       	sbc	r21, r21
 280:	bb 27       	eor	r27, r27
 282:	aa 27       	eor	r26, r26
 284:	62 17       	cp	r22, r18
 286:	73 07       	cpc	r23, r19
 288:	84 07       	cpc	r24, r20
 28a:	38 f0       	brcs	.+14     	; 0x29a <__divsf3_pse+0x26>
 28c:	9f 5f       	subi	r25, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	44 1f       	adc	r20, r20
 296:	aa 1f       	adc	r26, r26
 298:	a9 f3       	breq	.-22     	; 0x284 <__divsf3_pse+0x10>
 29a:	35 d0       	rcall	.+106    	; 0x306 <__divsf3_pse+0x92>
 29c:	0e 2e       	mov	r0, r30
 29e:	3a f0       	brmi	.+14     	; 0x2ae <__divsf3_pse+0x3a>
 2a0:	e0 e8       	ldi	r30, 0x80	; 128
 2a2:	32 d0       	rcall	.+100    	; 0x308 <__divsf3_pse+0x94>
 2a4:	91 50       	subi	r25, 0x01	; 1
 2a6:	50 40       	sbci	r21, 0x00	; 0
 2a8:	e6 95       	lsr	r30
 2aa:	00 1c       	adc	r0, r0
 2ac:	ca f7       	brpl	.-14     	; 0x2a0 <__divsf3_pse+0x2c>
 2ae:	2b d0       	rcall	.+86     	; 0x306 <__divsf3_pse+0x92>
 2b0:	fe 2f       	mov	r31, r30
 2b2:	29 d0       	rcall	.+82     	; 0x306 <__divsf3_pse+0x92>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	bb 1f       	adc	r27, r27
 2bc:	26 17       	cp	r18, r22
 2be:	37 07       	cpc	r19, r23
 2c0:	48 07       	cpc	r20, r24
 2c2:	ab 07       	cpc	r26, r27
 2c4:	b0 e8       	ldi	r27, 0x80	; 128
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__divsf3_pse+0x56>
 2c8:	bb 0b       	sbc	r27, r27
 2ca:	80 2d       	mov	r24, r0
 2cc:	bf 01       	movw	r22, r30
 2ce:	ff 27       	eor	r31, r31
 2d0:	93 58       	subi	r25, 0x83	; 131
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	3a f0       	brmi	.+14     	; 0x2e4 <__divsf3_pse+0x70>
 2d6:	9e 3f       	cpi	r25, 0xFE	; 254
 2d8:	51 05       	cpc	r21, r1
 2da:	78 f0       	brcs	.+30     	; 0x2fa <__divsf3_pse+0x86>
 2dc:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 2e0:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>
 2e4:	5f 3f       	cpi	r21, 0xFF	; 255
 2e6:	e4 f3       	brlt	.-8      	; 0x2e0 <__divsf3_pse+0x6c>
 2e8:	98 3e       	cpi	r25, 0xE8	; 232
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <__divsf3_pse+0x6c>
 2ec:	86 95       	lsr	r24
 2ee:	77 95       	ror	r23
 2f0:	67 95       	ror	r22
 2f2:	b7 95       	ror	r27
 2f4:	f7 95       	ror	r31
 2f6:	9f 5f       	subi	r25, 0xFF	; 255
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <__divsf3_pse+0x78>
 2fa:	88 0f       	add	r24, r24
 2fc:	91 1d       	adc	r25, r1
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	97 f9       	bld	r25, 7
 304:	08 95       	ret
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	bb 1f       	adc	r27, r27
 310:	62 17       	cp	r22, r18
 312:	73 07       	cpc	r23, r19
 314:	84 07       	cpc	r24, r20
 316:	ba 07       	cpc	r27, r26
 318:	20 f0       	brcs	.+8      	; 0x322 <__divsf3_pse+0xae>
 31a:	62 1b       	sub	r22, r18
 31c:	73 0b       	sbc	r23, r19
 31e:	84 0b       	sbc	r24, r20
 320:	ba 0b       	sbc	r27, r26
 322:	ee 1f       	adc	r30, r30
 324:	88 f7       	brcc	.-30     	; 0x308 <__divsf3_pse+0x94>
 326:	e0 95       	com	r30
 328:	08 95       	ret

0000032a <__fixsfsi>:
 32a:	0e 94 9c 01 	call	0x338	; 0x338 <__fixunssfsi>
 32e:	68 94       	set
 330:	b1 11       	cpse	r27, r1
 332:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>
 336:	08 95       	ret

00000338 <__fixunssfsi>:
 338:	0e 94 38 02 	call	0x470	; 0x470 <__fp_splitA>
 33c:	88 f0       	brcs	.+34     	; 0x360 <__fixunssfsi+0x28>
 33e:	9f 57       	subi	r25, 0x7F	; 127
 340:	98 f0       	brcs	.+38     	; 0x368 <__fixunssfsi+0x30>
 342:	b9 2f       	mov	r27, r25
 344:	99 27       	eor	r25, r25
 346:	b7 51       	subi	r27, 0x17	; 23
 348:	b0 f0       	brcs	.+44     	; 0x376 <__fixunssfsi+0x3e>
 34a:	e1 f0       	breq	.+56     	; 0x384 <__fixunssfsi+0x4c>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	1a f0       	brmi	.+6      	; 0x35c <__fixunssfsi+0x24>
 356:	ba 95       	dec	r27
 358:	c9 f7       	brne	.-14     	; 0x34c <__fixunssfsi+0x14>
 35a:	14 c0       	rjmp	.+40     	; 0x384 <__fixunssfsi+0x4c>
 35c:	b1 30       	cpi	r27, 0x01	; 1
 35e:	91 f0       	breq	.+36     	; 0x384 <__fixunssfsi+0x4c>
 360:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_zero>
 364:	b1 e0       	ldi	r27, 0x01	; 1
 366:	08 95       	ret
 368:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_zero>
 36c:	67 2f       	mov	r22, r23
 36e:	78 2f       	mov	r23, r24
 370:	88 27       	eor	r24, r24
 372:	b8 5f       	subi	r27, 0xF8	; 248
 374:	39 f0       	breq	.+14     	; 0x384 <__fixunssfsi+0x4c>
 376:	b9 3f       	cpi	r27, 0xF9	; 249
 378:	cc f3       	brlt	.-14     	; 0x36c <__fixunssfsi+0x34>
 37a:	86 95       	lsr	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b3 95       	inc	r27
 382:	d9 f7       	brne	.-10     	; 0x37a <__fixunssfsi+0x42>
 384:	3e f4       	brtc	.+14     	; 0x394 <__fixunssfsi+0x5c>
 386:	90 95       	com	r25
 388:	80 95       	com	r24
 38a:	70 95       	com	r23
 38c:	61 95       	neg	r22
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	8f 4f       	sbci	r24, 0xFF	; 255
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	08 95       	ret

00000396 <__floatunsisf>:
 396:	e8 94       	clt
 398:	09 c0       	rjmp	.+18     	; 0x3ac <__floatsisf+0x12>

0000039a <__floatsisf>:
 39a:	97 fb       	bst	r25, 7
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__floatsisf+0x12>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	99 23       	and	r25, r25
 3ae:	a9 f0       	breq	.+42     	; 0x3da <__floatsisf+0x40>
 3b0:	f9 2f       	mov	r31, r25
 3b2:	96 e9       	ldi	r25, 0x96	; 150
 3b4:	bb 27       	eor	r27, r27
 3b6:	93 95       	inc	r25
 3b8:	f6 95       	lsr	r31
 3ba:	87 95       	ror	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f1 11       	cpse	r31, r1
 3c4:	f8 cf       	rjmp	.-16     	; 0x3b6 <__floatsisf+0x1c>
 3c6:	fa f4       	brpl	.+62     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3c8:	bb 0f       	add	r27, r27
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__floatsisf+0x36>
 3cc:	60 ff       	sbrs	r22, 0
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	16 c0       	rjmp	.+44     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3da:	88 23       	and	r24, r24
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <__floatsisf+0x48>
 3de:	96 e9       	ldi	r25, 0x96	; 150
 3e0:	11 c0       	rjmp	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e2:	77 23       	and	r23, r23
 3e4:	21 f0       	breq	.+8      	; 0x3ee <__floatsisf+0x54>
 3e6:	9e e8       	ldi	r25, 0x8E	; 142
 3e8:	87 2f       	mov	r24, r23
 3ea:	76 2f       	mov	r23, r22
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__floatsisf+0x5e>
 3ee:	66 23       	and	r22, r22
 3f0:	71 f0       	breq	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f2:	96 e8       	ldi	r25, 0x86	; 134
 3f4:	86 2f       	mov	r24, r22
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	2a f0       	brmi	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	9a 95       	dec	r25
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	da f7       	brpl	.-10     	; 0x3fc <__floatsisf+0x62>
 406:	88 0f       	add	r24, r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret

00000410 <__fp_inf>:
 410:	97 f9       	bld	r25, 7
 412:	9f 67       	ori	r25, 0x7F	; 127
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	08 95       	ret

0000041c <__fp_nan>:
 41c:	9f ef       	ldi	r25, 0xFF	; 255
 41e:	80 ec       	ldi	r24, 0xC0	; 192
 420:	08 95       	ret

00000422 <__fp_pscA>:
 422:	00 24       	eor	r0, r0
 424:	0a 94       	dec	r0
 426:	16 16       	cp	r1, r22
 428:	17 06       	cpc	r1, r23
 42a:	18 06       	cpc	r1, r24
 42c:	09 06       	cpc	r0, r25
 42e:	08 95       	ret

00000430 <__fp_pscB>:
 430:	00 24       	eor	r0, r0
 432:	0a 94       	dec	r0
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	14 06       	cpc	r1, r20
 43a:	05 06       	cpc	r0, r21
 43c:	08 95       	ret

0000043e <__fp_round>:
 43e:	09 2e       	mov	r0, r25
 440:	03 94       	inc	r0
 442:	00 0c       	add	r0, r0
 444:	11 f4       	brne	.+4      	; 0x44a <__fp_round+0xc>
 446:	88 23       	and	r24, r24
 448:	52 f0       	brmi	.+20     	; 0x45e <__fp_round+0x20>
 44a:	bb 0f       	add	r27, r27
 44c:	40 f4       	brcc	.+16     	; 0x45e <__fp_round+0x20>
 44e:	bf 2b       	or	r27, r31
 450:	11 f4       	brne	.+4      	; 0x456 <__fp_round+0x18>
 452:	60 ff       	sbrs	r22, 0
 454:	04 c0       	rjmp	.+8      	; 0x45e <__fp_round+0x20>
 456:	6f 5f       	subi	r22, 0xFF	; 255
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__fp_split3>:
 460:	57 fd       	sbrc	r21, 7
 462:	90 58       	subi	r25, 0x80	; 128
 464:	44 0f       	add	r20, r20
 466:	55 1f       	adc	r21, r21
 468:	59 f0       	breq	.+22     	; 0x480 <__fp_splitA+0x10>
 46a:	5f 3f       	cpi	r21, 0xFF	; 255
 46c:	71 f0       	breq	.+28     	; 0x48a <__fp_splitA+0x1a>
 46e:	47 95       	ror	r20

00000470 <__fp_splitA>:
 470:	88 0f       	add	r24, r24
 472:	97 fb       	bst	r25, 7
 474:	99 1f       	adc	r25, r25
 476:	61 f0       	breq	.+24     	; 0x490 <__fp_splitA+0x20>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	79 f0       	breq	.+30     	; 0x49a <__fp_splitA+0x2a>
 47c:	87 95       	ror	r24
 47e:	08 95       	ret
 480:	12 16       	cp	r1, r18
 482:	13 06       	cpc	r1, r19
 484:	14 06       	cpc	r1, r20
 486:	55 1f       	adc	r21, r21
 488:	f2 cf       	rjmp	.-28     	; 0x46e <__fp_split3+0xe>
 48a:	46 95       	lsr	r20
 48c:	f1 df       	rcall	.-30     	; 0x470 <__fp_splitA>
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__fp_splitA+0x30>
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	18 06       	cpc	r1, r24
 496:	99 1f       	adc	r25, r25
 498:	f1 cf       	rjmp	.-30     	; 0x47c <__fp_splitA+0xc>
 49a:	86 95       	lsr	r24
 49c:	71 05       	cpc	r23, r1
 49e:	61 05       	cpc	r22, r1
 4a0:	08 94       	sec
 4a2:	08 95       	ret

000004a4 <__fp_zero>:
 4a4:	e8 94       	clt

000004a6 <__fp_szero>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	66 27       	eor	r22, r22
 4aa:	77 27       	eor	r23, r23
 4ac:	cb 01       	movw	r24, r22
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <__mulsf3>:
 4b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__mulsf3x>
 4b6:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_round>
 4ba:	0e 94 11 02 	call	0x422	; 0x422 <__fp_pscA>
 4be:	38 f0       	brcs	.+14     	; 0x4ce <__mulsf3+0x1c>
 4c0:	0e 94 18 02 	call	0x430	; 0x430 <__fp_pscB>
 4c4:	20 f0       	brcs	.+8      	; 0x4ce <__mulsf3+0x1c>
 4c6:	95 23       	and	r25, r21
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__mulsf3+0x1c>
 4ca:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 4ce:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_nan>
 4d2:	11 24       	eor	r1, r1
 4d4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>

000004d8 <__mulsf3x>:
 4d8:	0e 94 30 02 	call	0x460	; 0x460 <__fp_split3>
 4dc:	70 f3       	brcs	.-36     	; 0x4ba <__mulsf3+0x8>

000004de <__mulsf3_pse>:
 4de:	95 9f       	mul	r25, r21
 4e0:	c1 f3       	breq	.-16     	; 0x4d2 <__mulsf3+0x20>
 4e2:	95 0f       	add	r25, r21
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	55 1f       	adc	r21, r21
 4e8:	62 9f       	mul	r22, r18
 4ea:	f0 01       	movw	r30, r0
 4ec:	72 9f       	mul	r23, r18
 4ee:	bb 27       	eor	r27, r27
 4f0:	f0 0d       	add	r31, r0
 4f2:	b1 1d       	adc	r27, r1
 4f4:	63 9f       	mul	r22, r19
 4f6:	aa 27       	eor	r26, r26
 4f8:	f0 0d       	add	r31, r0
 4fa:	b1 1d       	adc	r27, r1
 4fc:	aa 1f       	adc	r26, r26
 4fe:	64 9f       	mul	r22, r20
 500:	66 27       	eor	r22, r22
 502:	b0 0d       	add	r27, r0
 504:	a1 1d       	adc	r26, r1
 506:	66 1f       	adc	r22, r22
 508:	82 9f       	mul	r24, r18
 50a:	22 27       	eor	r18, r18
 50c:	b0 0d       	add	r27, r0
 50e:	a1 1d       	adc	r26, r1
 510:	62 1f       	adc	r22, r18
 512:	73 9f       	mul	r23, r19
 514:	b0 0d       	add	r27, r0
 516:	a1 1d       	adc	r26, r1
 518:	62 1f       	adc	r22, r18
 51a:	83 9f       	mul	r24, r19
 51c:	a0 0d       	add	r26, r0
 51e:	61 1d       	adc	r22, r1
 520:	22 1f       	adc	r18, r18
 522:	74 9f       	mul	r23, r20
 524:	33 27       	eor	r19, r19
 526:	a0 0d       	add	r26, r0
 528:	61 1d       	adc	r22, r1
 52a:	23 1f       	adc	r18, r19
 52c:	84 9f       	mul	r24, r20
 52e:	60 0d       	add	r22, r0
 530:	21 1d       	adc	r18, r1
 532:	82 2f       	mov	r24, r18
 534:	76 2f       	mov	r23, r22
 536:	6a 2f       	mov	r22, r26
 538:	11 24       	eor	r1, r1
 53a:	9f 57       	subi	r25, 0x7F	; 127
 53c:	50 40       	sbci	r21, 0x00	; 0
 53e:	9a f0       	brmi	.+38     	; 0x566 <__mulsf3_pse+0x88>
 540:	f1 f0       	breq	.+60     	; 0x57e <__mulsf3_pse+0xa0>
 542:	88 23       	and	r24, r24
 544:	4a f0       	brmi	.+18     	; 0x558 <__mulsf3_pse+0x7a>
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	bb 1f       	adc	r27, r27
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	91 50       	subi	r25, 0x01	; 1
 554:	50 40       	sbci	r21, 0x00	; 0
 556:	a9 f7       	brne	.-22     	; 0x542 <__mulsf3_pse+0x64>
 558:	9e 3f       	cpi	r25, 0xFE	; 254
 55a:	51 05       	cpc	r21, r1
 55c:	80 f0       	brcs	.+32     	; 0x57e <__mulsf3_pse+0xa0>
 55e:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 562:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>
 566:	5f 3f       	cpi	r21, 0xFF	; 255
 568:	e4 f3       	brlt	.-8      	; 0x562 <__mulsf3_pse+0x84>
 56a:	98 3e       	cpi	r25, 0xE8	; 232
 56c:	d4 f3       	brlt	.-12     	; 0x562 <__mulsf3_pse+0x84>
 56e:	86 95       	lsr	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f7 95       	ror	r31
 578:	e7 95       	ror	r30
 57a:	9f 5f       	subi	r25, 0xFF	; 255
 57c:	c1 f7       	brne	.-16     	; 0x56e <__mulsf3_pse+0x90>
 57e:	fe 2b       	or	r31, r30
 580:	88 0f       	add	r24, r24
 582:	91 1d       	adc	r25, r1
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	97 f9       	bld	r25, 7
 58a:	08 95       	ret

0000058c <__umulhisi3>:
 58c:	a2 9f       	mul	r26, r18
 58e:	b0 01       	movw	r22, r0
 590:	b3 9f       	mul	r27, r19
 592:	c0 01       	movw	r24, r0
 594:	a3 9f       	mul	r26, r19
 596:	70 0d       	add	r23, r0
 598:	81 1d       	adc	r24, r1
 59a:	11 24       	eor	r1, r1
 59c:	91 1d       	adc	r25, r1
 59e:	b2 9f       	mul	r27, r18
 5a0:	70 0d       	add	r23, r0
 5a2:	81 1d       	adc	r24, r1
 5a4:	11 24       	eor	r1, r1
 5a6:	91 1d       	adc	r25, r1
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
