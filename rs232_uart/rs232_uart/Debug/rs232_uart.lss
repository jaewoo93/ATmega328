
rs232_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cd  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24

	UBRR0H = 0x00;
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	UCSR0C |= 0x06;
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <UART_transmit+0x4>
	UDR0 = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  be:	08 95       	ret

000000c0 <main>:

int main(int argc, char *argv[])
{
    char data = '0';
	
	UART_INIT();		// UART 통신 초기화
  c0:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
    while (1) 
    {
		UART_transmit(data++);		// 카운터값을 컴퓨터로 전달
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
		UART_transmit('\n');		// 줄바꿈
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
    char data = '0';
	
	UART_INIT();		// UART 통신 초기화
    while (1) 
    {
		UART_transmit(data++);		// 카운터값을 컴퓨터로 전달
  d0:	81 e3       	ldi	r24, 0x31	; 49
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x16>
		UART_transmit('\n');		// 줄바꿈
		
		if(data > '9')	data = '0';
  d4:	80 e3       	ldi	r24, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	33 ed       	ldi	r19, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x26>
  e6:	00 00       	nop
    char data = '0';
	
	UART_INIT();		// UART 통신 초기화
    while (1) 
    {
		UART_transmit(data++);		// 카운터값을 컴퓨터로 전달
  e8:	c1 e0       	ldi	r28, 0x01	; 1
  ea:	c8 0f       	add	r28, r24
  ec:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
		UART_transmit('\n');		// 줄바꿈
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
		
		if(data > '9')	data = '0';
  f6:	ca 33       	cpi	r28, 0x3A	; 58
  f8:	68 f7       	brcc	.-38     	; 0xd4 <main+0x14>
    char data = '0';
	
	UART_INIT();		// UART 통신 초기화
    while (1) 
    {
		UART_transmit(data++);		// 카운터값을 컴퓨터로 전달
  fa:	8c 2f       	mov	r24, r28
  fc:	ec cf       	rjmp	.-40     	; 0xd6 <main+0x16>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
