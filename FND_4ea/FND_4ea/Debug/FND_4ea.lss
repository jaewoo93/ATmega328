
FND_4ea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000740  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fd  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int i, j;
	
	DDRD = 0xFF;		// 세그먼트 제어핀 8개를 출력으로 설정
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;		// 자릿수 선택핀 4개를 출력으로 설정
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		for(i = 0; i < 4; i++)
		{
			// 해당 자리에만 0(GND)을 출력하고 나머지에는 1을 출력하여 자리 선택
			PORTB = 0x0F & ~(1 << i);		// 선택한 자리만 0 만들기
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	9e 01       	movw	r18, r28
  ca:	25 5f       	subi	r18, 0xF5	; 245
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRD = 0xFF;		// 세그먼트 제어핀 8개를 출력으로 설정
	DDRB = 0x0F;		// 자릿수 선택핀 4개를 출력으로 설정
	
    while (1) 
    {
		for(i = 0; i < 4; i++)
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
		{
			// 해당 자리에만 0(GND)을 출력하고 나머지에는 1을 출력하여 자리 선택
			PORTB = 0x0F & ~(1 << i);		// 선택한 자리만 0 만들기
  d2:	cb 01       	movw	r24, r22
  d4:	04 2e       	mov	r0, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x46>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <main+0x42>
  e0:	80 95       	com	r24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	fe 01       	movw	r30, r28
  e8:	31 96       	adiw	r30, 0x01	; 1
			for(j = 0; j < 10; j++)
			{
				PORTD = numbers[j];		// 숫자 데이터 출력
  ea:	81 91       	ld	r24, Z+
  ec:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	91 ee       	ldi	r25, 0xE1	; 225
  f2:	a4 e0       	ldi	r26, 0x04	; 4
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	a0 40       	sbci	r26, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x5e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x68>
  fe:	00 00       	nop
    {
		for(i = 0; i < 4; i++)
		{
			// 해당 자리에만 0(GND)을 출력하고 나머지에는 1을 출력하여 자리 선택
			PORTB = 0x0F & ~(1 << i);		// 선택한 자리만 0 만들기
			for(j = 0; j < 10; j++)
 100:	e2 17       	cp	r30, r18
 102:	f3 07       	cpc	r31, r19
 104:	91 f7       	brne	.-28     	; 0xea <main+0x54>
	DDRD = 0xFF;		// 세그먼트 제어핀 8개를 출력으로 설정
	DDRB = 0x0F;		// 자릿수 선택핀 4개를 출력으로 설정
	
    while (1) 
    {
		for(i = 0; i < 4; i++)
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	44 30       	cpi	r20, 0x04	; 4
 10c:	51 05       	cpc	r21, r1
 10e:	09 f7       	brne	.-62     	; 0xd2 <main+0x3c>
 110:	de cf       	rjmp	.-68     	; 0xce <main+0x38>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
