
textLCD_helloworld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd1  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000758  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046a  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_pulse_enable>:
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
  96:	29 9a       	sbi	0x05, 1	; 5
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_pulse_enable+0x4>
  9e:	00 00       	nop
  a0:	29 98       	cbi	0x05, 1	; 5
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_pulse_enable+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_pulse_enable+0x16>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <LCD_write_data>:
  b0:	28 9a       	sbi	0x05, 0	; 5
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
  b8:	08 95       	ret

000000ba <LCD_write_command>:
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_pulse_enable>
  c2:	08 95       	ret

000000c4 <LCD_clear>:
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	9f e1       	ldi	r25, 0x1F	; 31
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_clear+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_clear+0x10>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_init>:
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	80 e7       	ldi	r24, 0x70	; 112
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <LCD_init+0x6>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_init+0x10>
  e8:	00 00       	nop
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	84 b9       	out	0x04, r24	; 4
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_clear>
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
 10a:	08 95       	ret

0000010c <LCD_write_string>:
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	59 f0       	breq	.+22     	; 0x130 <LCD_write_string+0x24>
 11a:	8f 01       	movw	r16, r30
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_write_data>
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	f8 01       	movw	r30, r16
 126:	ec 0f       	add	r30, r28
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <LCD_write_string+0x12>
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <main>:
}
int main(void)
{
    LCD_init();		// 텍스트 LCD 초기화
 138:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_init>
	
	LCD_write_string("Hello World!");		// 문자열 출력
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x12>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x1c>
 154:	00 00       	nop
	
	_delay_ms(1000);		// 1초 대기
	
	LCD_clear();			// 화면 지움
 156:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_clear>
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
	
	LCD_clear();			// 화면 지움
	
	// 화면에 보이는 영역은 기본값으로 0~1행, 0~15열로 설정되어 있다.
	LCD_goto_XY(0, 0);		// 0행 0열로 이동
	LCD_write_data('1');	// 문자 단위 출력
 160:	81 e3       	ldi	r24, 0x31	; 49
 162:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_write_data>
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
 166:	85 e8       	ldi	r24, 0x85	; 133
 168:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
	// 화면에 보이는 영역은 기본값으로 0~1행, 0~15열로 설정되어 있다.
	LCD_goto_XY(0, 0);		// 0행 0열로 이동
	LCD_write_data('1');	// 문자 단위 출력
	
	LCD_goto_XY(0, 5);		
	LCD_write_data('2');
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_write_data>
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
	
	LCD_goto_XY(0, 5);		
	LCD_write_data('2');
	
	LCD_goto_XY(1, 0);
	LCD_write_data('3');
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_write_data>
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
 17e:	85 ec       	ldi	r24, 0xC5	; 197
 180:	0e 94 5d 00 	call	0xba	; 0xba <LCD_write_command>
	
	LCD_goto_XY(1, 0);
	LCD_write_data('3');
	
	LCD_goto_XY(1, 5);
	LCD_write_data('4');
 184:	84 e3       	ldi	r24, 0x34	; 52
 186:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_write_data>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x52>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
