
eeprom_pointer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000258  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0e  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070d  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000428  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ea  00000000  00000000  00001e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8e:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:
		numString[i] ='\0';
		index = i-1;
	}
	for(i=index; i>=0; i--)						 // 변환된 문자열 출력
	UART_transmit(numString[i]);
}
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <UART_transmit>:
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <UART_transmit+0x4>
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d4:	08 95       	ret

000000d6 <UART_printString>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <UART_printString+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <UART_printString+0xe>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <UART_print16bitNumber>:
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <UART_print16bitNumber+0xe>
 102:	00 d0       	rcall	.+0      	; 0x104 <UART_print16bitNumber+0x10>
 104:	00 d0       	rcall	.+0      	; 0x106 <UART_print16bitNumber+0x12>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	ac 01       	movw	r20, r24
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	fe 01       	movw	r30, r28
 116:	33 96       	adiw	r30, 0x03	; 3
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	df 01       	movw	r26, r30
 11c:	1d 92       	st	X+, r1
 11e:	8a 95       	dec	r24
 120:	e9 f7       	brne	.-6      	; 0x11c <UART_print16bitNumber+0x28>
 122:	41 15       	cp	r20, r1
 124:	51 05       	cpc	r21, r1
 126:	b9 f1       	breq	.+110    	; 0x196 <UART_print16bitNumber+0xa2>
 128:	32 97       	sbiw	r30, 0x02	; 2
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	01 c0       	rjmp	.+2      	; 0x132 <UART_print16bitNumber+0x3e>
 130:	8c 01       	movw	r16, r24
 132:	9a 01       	movw	r18, r20
 134:	ad ec       	ldi	r26, 0xCD	; 205
 136:	bc ec       	ldi	r27, 0xCC	; 204
 138:	0e 94 1b 01 	call	0x236	; 0x236 <__umulhisi3>
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	9c 01       	movw	r18, r24
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	82 0f       	add	r24, r18
 15c:	93 1f       	adc	r25, r19
 15e:	9a 01       	movw	r18, r20
 160:	28 1b       	sub	r18, r24
 162:	39 0b       	sbc	r19, r25
 164:	c9 01       	movw	r24, r18
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	81 93       	st	Z+, r24
 16a:	9a 01       	movw	r18, r20
 16c:	0e 94 1b 01 	call	0x236	; 0x236 <__umulhisi3>
 170:	ac 01       	movw	r20, r24
 172:	56 95       	lsr	r21
 174:	47 95       	ror	r20
 176:	56 95       	lsr	r21
 178:	47 95       	ror	r20
 17a:	56 95       	lsr	r21
 17c:	47 95       	ror	r20
 17e:	c8 01       	movw	r24, r16
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	41 15       	cp	r20, r1
 184:	51 05       	cpc	r21, r1
 186:	a1 f6       	brne	.-88     	; 0x130 <UART_print16bitNumber+0x3c>
 188:	fe 01       	movw	r30, r28
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	11 82       	std	Z+1, r1	; 0x01
 190:	11 23       	and	r17, r17
 192:	1c f4       	brge	.+6      	; 0x19a <UART_print16bitNumber+0xa6>
 194:	10 c0       	rjmp	.+32     	; 0x1b6 <UART_print16bitNumber+0xc2>
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	ce 01       	movw	r24, r28
 19c:	80 0f       	add	r24, r16
 19e:	91 1f       	adc	r25, r17
 1a0:	dc 01       	movw	r26, r24
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	7d 01       	movw	r14, r26
 1a6:	f7 01       	movw	r30, r14
 1a8:	82 91       	ld	r24, -Z
 1aa:	7f 01       	movw	r14, r30
 1ac:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
 1b0:	01 50       	subi	r16, 0x01	; 1
 1b2:	11 09       	sbc	r17, r1
 1b4:	c2 f7       	brpl	.-16     	; 0x1a6 <UART_print16bitNumber+0xb2>
 1b6:	26 96       	adiw	r28, 0x06	; 6
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <main>:

int main(void)
{
	UART_INIT();		// UART 통신 초기화
 1d0:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	
	uint8_t *p1, *p2;
	p1 = 0;
	p2 = p1 + 1;		// p1 번지에 uint8_t 데이터 형의 바이트 수를 더한 값 = 1
	
	UART_printString("P1 : ");
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print16bitNumber((uint16_t)p1);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print16bitNumber>
	UART_printString("\n");
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("P2 : ");
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print16bitNumber((uint16_t)p2);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print16bitNumber>
	UART_printString("\n");
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	
	uint16_t *p3, *p4;
	p3 = 0;
	p4 = p3 + 1;		// p3 번지에 uin16_t 데이터 형의 바이트 수를 더한 값 = 2
	
	UART_printString("P3 : ");
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print16bitNumber((uint16_t)p3);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print16bitNumber>
	UART_printString("\n");
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_printString("P4 : ");
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
	UART_print16bitNumber((uint16_t)p4);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_print16bitNumber>
	UART_printString("\n");
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_printString>
 234:	ff cf       	rjmp	.-2      	; 0x234 <main+0x64>

00000236 <__umulhisi3>:
 236:	a2 9f       	mul	r26, r18
 238:	b0 01       	movw	r22, r0
 23a:	b3 9f       	mul	r27, r19
 23c:	c0 01       	movw	r24, r0
 23e:	a3 9f       	mul	r26, r19
 240:	70 0d       	add	r23, r0
 242:	81 1d       	adc	r24, r1
 244:	11 24       	eor	r1, r1
 246:	91 1d       	adc	r25, r1
 248:	b2 9f       	mul	r27, r18
 24a:	70 0d       	add	r23, r0
 24c:	81 1d       	adc	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	91 1d       	adc	r25, r1
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
