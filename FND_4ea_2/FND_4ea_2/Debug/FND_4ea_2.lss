
FND_4ea_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000855  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#define SEGMENT_DELAY	5


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int count = 1000;		// 현재 표시할 숫자 (0 ~ 9)
	int thousands, hundreds, tens, ones;
	
	DDRD = 0xFF;		// 세그먼트 제어핀 8개를 출력으로 설정
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;		// 자릿수 선택핀 4개를 출력으로 설정
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 b9       	out	0x04, r24	; 4


int main(void)
{
	uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 1000;		// 현재 표시할 숫자 (0 ~ 9)
  c4:	28 ee       	ldi	r18, 0xE8	; 232
  c6:	33 e0       	ldi	r19, 0x03	; 3
		thousands = count / 1000;			// 천의 자리
		hundreds = count / 100 % 10;		// 백의 자리
		tens = count / 10 % 10;				// 십의 자리
		ones = count % 10;					// 일의 자리
		
		PORTB = 0x0E;		// 천의 자리 출력. 0000 1110
  c8:	0f 2e       	mov	r0, r31
  ca:	fe e0       	ldi	r31, 0x0E	; 14
  cc:	9f 2e       	mov	r9, r31
  ce:	f0 2d       	mov	r31, r0
		PORTD = numbers[thousands];
  d0:	0f 2e       	mov	r0, r31
  d2:	f8 ee       	ldi	r31, 0xE8	; 232
  d4:	cf 2e       	mov	r12, r31
  d6:	f3 e0       	ldi	r31, 0x03	; 3
  d8:	df 2e       	mov	r13, r31
  da:	f0 2d       	mov	r31, r0
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0D;		// 백의 자리 출력. 0000 1101
  dc:	0f 2e       	mov	r0, r31
  de:	fd e0       	ldi	r31, 0x0D	; 13
  e0:	af 2e       	mov	r10, r31
  e2:	f0 2d       	mov	r31, r0
		PORTD = numbers[hundreds];
  e4:	0f 2e       	mov	r0, r31
  e6:	f4 e6       	ldi	r31, 0x64	; 100
  e8:	ef 2e       	mov	r14, r31
  ea:	f1 2c       	mov	r15, r1
  ec:	f0 2d       	mov	r31, r0
  ee:	0a e0       	ldi	r16, 0x0A	; 10
  f0:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0B;		// 십의 자리 출력. 0000 1011
  f2:	0f 2e       	mov	r0, r31
  f4:	fb e0       	ldi	r31, 0x0B	; 11
  f6:	bf 2e       	mov	r11, r31
  f8:	f0 2d       	mov	r31, r0
		PORTD = numbers[tens];
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x07;		// 일의 자리 출력. 0000 0111
  fa:	47 e0       	ldi	r20, 0x07	; 7
		thousands = count / 1000;			// 천의 자리
		hundreds = count / 100 % 10;		// 백의 자리
		tens = count / 10 % 10;				// 십의 자리
		ones = count % 10;					// 일의 자리
		
		PORTB = 0x0E;		// 천의 자리 출력. 0000 1110
  fc:	95 b8       	out	0x05, r9	; 5
		PORTD = numbers[thousands];
  fe:	c9 01       	movw	r24, r18
 100:	b6 01       	movw	r22, r12
 102:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e6 0f       	add	r30, r22
 110:	f7 1f       	adc	r31, r23
 112:	80 81       	ld	r24, Z
 114:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e1       	ldi	r24, 0x1F	; 31
 118:	9e e4       	ldi	r25, 0x4E	; 78
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x84>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x8a>
 120:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0D;		// 백의 자리 출력. 0000 1101
 122:	a5 b8       	out	0x05, r10	; 5
		PORTD = numbers[hundreds];
 124:	c9 01       	movw	r24, r18
 126:	b7 01       	movw	r22, r14
 128:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 12c:	cb 01       	movw	r24, r22
 12e:	b8 01       	movw	r22, r16
 130:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	e8 0f       	add	r30, r24
 13e:	f9 1f       	adc	r31, r25
 140:	80 81       	ld	r24, Z
 142:	8b b9       	out	0x0b, r24	; 11
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xb2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xb8>
 14e:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0B;		// 십의 자리 출력. 0000 1011
 150:	b5 b8       	out	0x05, r11	; 5
		PORTD = numbers[tens];
 152:	c9 01       	movw	r24, r18
 154:	b8 01       	movw	r22, r16
 156:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 15a:	fc 01       	movw	r30, r24
 15c:	cb 01       	movw	r24, r22
 15e:	b8 01       	movw	r22, r16
 160:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 164:	a1 e0       	ldi	r26, 0x01	; 1
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ac 0f       	add	r26, r28
 16a:	bd 1f       	adc	r27, r29
 16c:	a8 0f       	add	r26, r24
 16e:	b9 1f       	adc	r27, r25
 170:	8c 91       	ld	r24, X
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xe2>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xe8>
 17e:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x07;		// 일의 자리 출력. 0000 0111
 180:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[ones];
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	8c 0f       	add	r24, r28
 188:	9d 1f       	adc	r25, r29
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x100>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x106>
 19c:	00 00       	nop
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	51 ee       	ldi	r21, 0xE1	; 225
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	50 40       	sbci	r21, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x10e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x118>
 1ae:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		_delay_ms(100);
		
		count++;
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(count == 9999)	count = 1000;
 1b4:	2f 30       	cpi	r18, 0x0F	; 15
 1b6:	97 e2       	ldi	r25, 0x27	; 39
 1b8:	39 07       	cpc	r19, r25
 1ba:	09 f0       	breq	.+2      	; 0x1be <main+0x128>
 1bc:	9f cf       	rjmp	.-194    	; 0xfc <main+0x66>
 1be:	28 ee       	ldi	r18, 0xE8	; 232
 1c0:	33 e0       	ldi	r19, 0x03	; 3
 1c2:	9c cf       	rjmp	.-200    	; 0xfc <main+0x66>

000001c4 <__divmodhi4>:
 1c4:	97 fb       	bst	r25, 7
 1c6:	07 2e       	mov	r0, r23
 1c8:	16 f4       	brtc	.+4      	; 0x1ce <__divmodhi4+0xa>
 1ca:	00 94       	com	r0
 1cc:	07 d0       	rcall	.+14     	; 0x1dc <__divmodhi4_neg1>
 1ce:	77 fd       	sbrc	r23, 7
 1d0:	09 d0       	rcall	.+18     	; 0x1e4 <__divmodhi4_neg2>
 1d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__udivmodhi4>
 1d6:	07 fc       	sbrc	r0, 7
 1d8:	05 d0       	rcall	.+10     	; 0x1e4 <__divmodhi4_neg2>
 1da:	3e f4       	brtc	.+14     	; 0x1ea <__divmodhi4_exit>

000001dc <__divmodhi4_neg1>:
 1dc:	90 95       	com	r25
 1de:	81 95       	neg	r24
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	08 95       	ret

000001e4 <__divmodhi4_neg2>:
 1e4:	70 95       	com	r23
 1e6:	61 95       	neg	r22
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ea <__divmodhi4_exit>:
 1ea:	08 95       	ret

000001ec <__udivmodhi4>:
 1ec:	aa 1b       	sub	r26, r26
 1ee:	bb 1b       	sub	r27, r27
 1f0:	51 e1       	ldi	r21, 0x11	; 17
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__udivmodhi4_ep>

000001f4 <__udivmodhi4_loop>:
 1f4:	aa 1f       	adc	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a6 17       	cp	r26, r22
 1fa:	b7 07       	cpc	r27, r23
 1fc:	10 f0       	brcs	.+4      	; 0x202 <__udivmodhi4_ep>
 1fe:	a6 1b       	sub	r26, r22
 200:	b7 0b       	sbc	r27, r23

00000202 <__udivmodhi4_ep>:
 202:	88 1f       	adc	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	5a 95       	dec	r21
 208:	a9 f7       	brne	.-22     	; 0x1f4 <__udivmodhi4_loop>
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
