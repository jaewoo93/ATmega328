
chattering_solution2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ec  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000346  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:
#define F_CPU 16000000UL
#include <util/delay.h>

void UART_INIT(void)
{
	UCSR0A |= _BV(U2X0);		// 2배속 모드
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;				// 통신 속도(보울) 설정
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);		// 송수신 가능
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	 while( !(UCSR0A & (1<<UDRE0)) );		// 송신 가능 대기
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <UART_transmit+0x4>
	 UDR0 = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  be:	08 95       	ret

000000c0 <INIT_PORT>:
}

void INIT_PORT(void)
{
	DDRB = 0x20;		// PB5을 출력으로 설정
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		// LED는 꺼진 상태에서 시작
  c4:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;		// 버튼을 입력으로 설정
  c6:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;		// PD2 풀업 저항 사용
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <button_pressed>:
}

unsigned char button_pressed(void)
{
	if(bit_is_clear(PIND, PIND2))			// 첫 번째 검사
  ce:	4a 99       	sbic	0x09, 2	; 9
  d0:	0d c0       	rjmp	.+26     	; 0xec <button_pressed+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <button_pressed+0x8>
  da:	00 c0       	rjmp	.+0      	; 0xdc <button_pressed+0xe>
  dc:	00 00       	nop
	{
		_delay_ms(10);
		if(bit_is_clear(PIND, PIND2))		// 두 번째 검사
  de:	89 b1       	in	r24, 0x09	; 9
			return 1;
  e0:	82 fb       	bst	r24, 2
  e2:	99 27       	eor	r25, r25
  e4:	90 f9       	bld	r25, 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 27       	eor	r24, r25
  ea:	08 95       	ret
	}
	return 0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
}
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
	UART_INIT();		// UART 통신 초기화
  f0:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
	INIT_PORT();		// 포트 설정
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <INIT_PORT>
	int state = 0;		// 현재 버튼 상태 
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
			state = 1;			// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;		// LED 끄기
		}
		else
		{
			state = 0;			// 버튼이 눌러지지 않은 상태로 표시
  fc:	d1 2c       	mov	r13, r1
  fe:	e1 2c       	mov	r14, r1
		if(button_pressed())
		{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;			// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;		// LED 끄기
 100:	68 94       	set
 102:	ff 24       	eor	r15, r15
 104:	f5 f8       	bld	r15, 5
	{
		if(button_pressed())
		{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;			// 버튼이 눌러진 상태로 표시
 106:	01 e0       	ldi	r16, 0x01	; 1
 108:	10 e0       	ldi	r17, 0x00	; 0
	INIT_PORT();		// 포트 설정
	int state = 0;		// 현재 버튼 상태 
	
	while(1)
	{
		if(button_pressed())
 10a:	0e 94 67 00 	call	0xce	; 0xce <button_pressed>
 10e:	88 23       	and	r24, r24
 110:	49 f0       	breq	.+18     	; 0x124 <main+0x34>
		{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
 112:	cd 2b       	or	r28, r29
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x2c>
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
			state = 1;			// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;		// LED 끄기
 11c:	f5 b8       	out	0x05, r15	; 5
	{
		if(button_pressed())
		{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;			// 버튼이 눌러진 상태로 표시
 11e:	c0 2f       	mov	r28, r16
 120:	d1 2f       	mov	r29, r17
 122:	f3 cf       	rjmp	.-26     	; 0x10a <main+0x1a>
			PORTB = 0x20;		// LED 끄기
		}
		else
		{
			state = 0;			// 버튼이 눌러지지 않은 상태로 표시
			PORTB = 0x00;		// LED 끄기
 124:	15 b8       	out	0x05, r1	; 5
			state = 1;			// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;		// LED 끄기
		}
		else
		{
			state = 0;			// 버튼이 눌러지지 않은 상태로 표시
 126:	cd 2d       	mov	r28, r13
 128:	de 2d       	mov	r29, r14
 12a:	ef cf       	rjmp	.-34     	; 0x10a <main+0x1a>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
