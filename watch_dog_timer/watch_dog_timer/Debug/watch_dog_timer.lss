
watch_dog_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c9  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000766  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e5  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027a  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:
#include <avr/wdt.h>
#include <util/delay.h>

void UART_INIT(void)
{
	UCSR0A |= _BV(U2X0);		// 2배속 모드
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;				// 통신 속도(보울) 설정
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);		// 송수신 가능
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );		// 송신 가능 대기
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <UART_transmit+0x4>
	UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d4:	08 95       	ret

000000d6 <UART_print16bitNumber>:
}

void UART_print16bitNumber(uint16_t no)
{
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <UART_print16bitNumber+0xe>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <UART_print16bitNumber+0x10>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <UART_print16bitNumber+0x12>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	ac 01       	movw	r20, r24
	char numString[6] = "0";
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	fe 01       	movw	r30, r28
  f8:	33 96       	adiw	r30, 0x03	; 3
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	df 01       	movw	r26, r30
  fe:	1d 92       	st	X+, r1
 100:	8a 95       	dec	r24
 102:	e9 f7       	brne	.-6      	; 0xfe <UART_print16bitNumber+0x28>
	int i, index = 0;
	
	if(no > 0){
 104:	41 15       	cp	r20, r1
 106:	51 05       	cpc	r21, r1
 108:	b9 f1       	breq	.+110    	; 0x178 <UART_print16bitNumber+0xa2>
 10a:	32 97       	sbiw	r30, 0x02	; 2
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	01 c0       	rjmp	.+2      	; 0x114 <UART_print16bitNumber+0x3e>
		for(i = 0; no != 0 ; i++)
 112:	8c 01       	movw	r16, r24
		{
			numString[i] = no % 10 + '0';
 114:	9a 01       	movw	r18, r20
 116:	ad ec       	ldi	r26, 0xCD	; 205
 118:	bc ec       	ldi	r27, 0xCC	; 204
 11a:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	9c 01       	movw	r18, r24
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	9a 01       	movw	r18, r20
 142:	28 1b       	sub	r18, r24
 144:	39 0b       	sbc	r19, r25
 146:	c9 01       	movw	r24, r18
 148:	80 5d       	subi	r24, 0xD0	; 208
 14a:	81 93       	st	Z+, r24
			no = no / 10;
 14c:	9a 01       	movw	r18, r20
 14e:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
 152:	ac 01       	movw	r20, r24
 154:	56 95       	lsr	r21
 156:	47 95       	ror	r20
 158:	56 95       	lsr	r21
 15a:	47 95       	ror	r20
 15c:	56 95       	lsr	r21
 15e:	47 95       	ror	r20
{
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 160:	c8 01       	movw	r24, r16
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	41 15       	cp	r20, r1
 166:	51 05       	cpc	r21, r1
 168:	a1 f6       	brne	.-88     	; 0x112 <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 16a:	fe 01       	movw	r30, r28
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 172:	11 23       	and	r17, r17
 174:	1c f4       	brge	.+6      	; 0x17c <UART_print16bitNumber+0xa6>
 176:	10 c0       	rjmp	.+32     	; 0x198 <UART_print16bitNumber+0xc2>
}

void UART_print16bitNumber(uint16_t no)
{
	char numString[6] = "0";
	int i, index = 0;
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	80 0f       	add	r24, r16
 180:	91 1f       	adc	r25, r17
 182:	dc 01       	movw	r26, r24
 184:	12 96       	adiw	r26, 0x02	; 2
 186:	7d 01       	movw	r14, r26
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
 188:	f7 01       	movw	r30, r14
 18a:	82 91       	ld	r24, -Z
 18c:	7f 01       	movw	r14, r30
 18e:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 192:	01 50       	subi	r16, 0x01	; 1
 194:	11 09       	sbc	r17, r1
 196:	c2 f7       	brpl	.-16     	; 0x188 <UART_print16bitNumber+0xb2>
	UART_transmit(numString[i]);
}
 198:	26 96       	adiw	r28, 0x06	; 6
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <UART_printString>:

void UART_printString(char *str)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <UART_printString+0x18>
 1be:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);
 1c0:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
	UART_transmit(numString[i]);
}

void UART_printString(char *str)
{
	for(int i = 0; str[i]; i++)
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <UART_printString+0xe>
	UART_transmit(str[i]);
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 1d0:	99 e2       	ldi	r25, 0x29	; 41
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	a8 95       	wdr
 1da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>

int main(void)
{
    wdt_enable(WDTO_8S);		// 와치독 타이머 만료 시간을 8초로 설정
	UART_INIT();				// UART 통신 초기화
 1e4:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	UART_printString("** Initialization ** \n");
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <UART_printString>
	
	uint16_t count = 0;
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x2a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x34>
 204:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(1000);		// 1초에 한번 카운트 출력
		
		count++;
 206:	21 96       	adiw	r28, 0x01	; 1
		UART_printString("Count : ");
 208:	87 e1       	ldi	r24, 0x17	; 23
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <UART_printString>
		UART_print16bitNumber(count);
 210:	ce 01       	movw	r24, r28
 212:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_print16bitNumber>
		UART_transmit('\n');
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_transmit>
 21c:	eb cf       	rjmp	.-42     	; 0x1f4 <main+0x24>

0000021e <__umulhisi3>:
 21e:	a2 9f       	mul	r26, r18
 220:	b0 01       	movw	r22, r0
 222:	b3 9f       	mul	r27, r19
 224:	c0 01       	movw	r24, r0
 226:	a3 9f       	mul	r26, r19
 228:	70 0d       	add	r23, r0
 22a:	81 1d       	adc	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	91 1d       	adc	r25, r1
 230:	b2 9f       	mul	r27, r18
 232:	70 0d       	add	r23, r0
 234:	81 1d       	adc	r24, r1
 236:	11 24       	eor	r1, r1
 238:	91 1d       	adc	r25, r1
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
