
LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000497  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000123  00000000  00000000  00001a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LEDMatrix_init>:
#include "LEDMatrix.h"

void LEDMatrix_init(void)
{
	// 해당 column 핀을 출력으로 설정
	MATRIX_COL1_DDR |= (1 << MATRIX_COL1_PIN);
  80:	22 9a       	sbi	0x04, 2	; 4
	MATRIX_COL2_DDR |= (1 << MATRIX_COL2_PIN);
  82:	23 9a       	sbi	0x04, 3	; 4
	MATRIX_COL3_DDR |= (1 << MATRIX_COL3_PIN);
  84:	24 9a       	sbi	0x04, 4	; 4
	MATRIX_COL4_DDR |= (1 << MATRIX_COL4_PIN);
  86:	25 9a       	sbi	0x04, 5	; 4
	MATRIX_COL5_DDR |= (1 << MATRIX_COL5_PIN);
  88:	38 9a       	sbi	0x07, 0	; 7
	MATRIX_COL6_DDR |= (1 << MATRIX_COL6_PIN);
  8a:	39 9a       	sbi	0x07, 1	; 7
	MATRIX_COL7_DDR |= (1 << MATRIX_COL7_PIN);
  8c:	3a 9a       	sbi	0x07, 2	; 7
	MATRIX_COL8_DDR |= (1 << MATRIX_COL8_PIN);
  8e:	3b 9a       	sbi	0x07, 3	; 7
	
	// 해당 row 핀을 출력으로 설정
	MATRIX_ROW1_DDR |= (1 << MATRIX_ROW1_PIN);
  90:	52 9a       	sbi	0x0a, 2	; 10
	MATRIX_ROW2_DDR |= (1 << MATRIX_ROW2_PIN);
  92:	53 9a       	sbi	0x0a, 3	; 10
	MATRIX_ROW3_DDR |= (1 << MATRIX_ROW3_PIN);
  94:	54 9a       	sbi	0x0a, 4	; 10
	MATRIX_ROW4_DDR |= (1 << MATRIX_ROW4_PIN);
  96:	55 9a       	sbi	0x0a, 5	; 10
	MATRIX_ROW5_DDR |= (1 << MATRIX_ROW5_PIN);
  98:	56 9a       	sbi	0x0a, 6	; 10
	MATRIX_ROW6_DDR |= (1 << MATRIX_ROW6_PIN);
  9a:	57 9a       	sbi	0x0a, 7	; 10
	MATRIX_ROW7_DDR |= (1 << MATRIX_ROW7_PIN);
  9c:	50 9a       	sbi	0x0a, 0	; 10
	MATRIX_ROW8_DDR |= (1 << MATRIX_ROW8_PIN);
  9e:	51 9a       	sbi	0x0a, 1	; 10
  a0:	08 95       	ret

000000a2 <LEDMatrix_writeColumn>:
}

void LEDMatrix_writeColumn(uint8_t col_data)		// column 데이터 출력
{
	if(col_data & (1 << 0))		MATRIX_COL1_PORT |= (1 << MATRIX_COL1_PIN);		// ON
  a2:	80 ff       	sbrs	r24, 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <LEDMatrix_writeColumn+0x8>
  a6:	2a 9a       	sbi	0x05, 2	; 5
  a8:	01 c0       	rjmp	.+2      	; 0xac <LEDMatrix_writeColumn+0xa>
	else  MATRIX_COL1_PORT &= ~(1 << MATRIX_COL1_PIN);		// OFF
  aa:	2a 98       	cbi	0x05, 2	; 5
	
	if(col_data & (1 << 1))		MATRIX_COL2_PORT |= (1 << MATRIX_COL2_PIN);		// ON
  ac:	81 ff       	sbrs	r24, 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <LEDMatrix_writeColumn+0x12>
  b0:	2b 9a       	sbi	0x05, 3	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <LEDMatrix_writeColumn+0x14>
	else  MATRIX_COL2_PORT &= ~(1 << MATRIX_COL2_PIN);		// OFF
  b4:	2b 98       	cbi	0x05, 3	; 5
	
	if(col_data & (1 << 2))		MATRIX_COL3_PORT |= (1 << MATRIX_COL3_PIN);		// ON
  b6:	82 ff       	sbrs	r24, 2
  b8:	02 c0       	rjmp	.+4      	; 0xbe <LEDMatrix_writeColumn+0x1c>
  ba:	2c 9a       	sbi	0x05, 4	; 5
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <LEDMatrix_writeColumn+0x1e>
	else  MATRIX_COL3_PORT &= ~(1 << MATRIX_COL3_PIN);		// OFF
  be:	2c 98       	cbi	0x05, 4	; 5
	
	if(col_data & (1 << 3))		MATRIX_COL4_PORT |= (1 << MATRIX_COL4_PIN);		// ON
  c0:	83 ff       	sbrs	r24, 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <LEDMatrix_writeColumn+0x26>
  c4:	2d 9a       	sbi	0x05, 5	; 5
  c6:	01 c0       	rjmp	.+2      	; 0xca <LEDMatrix_writeColumn+0x28>
	else  MATRIX_COL4_PORT &= ~(1 << MATRIX_COL4_PIN);		// OFF
  c8:	2d 98       	cbi	0x05, 5	; 5
	
	if(col_data & (1 << 4))		MATRIX_COL5_PORT |= (1 << MATRIX_COL5_PIN);		// ON
  ca:	84 ff       	sbrs	r24, 4
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <LEDMatrix_writeColumn+0x30>
  ce:	40 9a       	sbi	0x08, 0	; 8
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <LEDMatrix_writeColumn+0x32>
	else  MATRIX_COL5_PORT &= ~(1 << MATRIX_COL5_PIN);		// OFF
  d2:	40 98       	cbi	0x08, 0	; 8
	
	if(col_data & (1 << 5))		MATRIX_COL6_PORT |= (1 << MATRIX_COL6_PIN);		// ON
  d4:	85 ff       	sbrs	r24, 5
  d6:	02 c0       	rjmp	.+4      	; 0xdc <LEDMatrix_writeColumn+0x3a>
  d8:	41 9a       	sbi	0x08, 1	; 8
  da:	01 c0       	rjmp	.+2      	; 0xde <LEDMatrix_writeColumn+0x3c>
	else  MATRIX_COL6_PORT &= ~(1 << MATRIX_COL6_PIN);		// OFF
  dc:	41 98       	cbi	0x08, 1	; 8
	
	if(col_data & (1 << 6))		MATRIX_COL7_PORT |= (1 << MATRIX_COL7_PIN);		// ON
  de:	86 ff       	sbrs	r24, 6
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <LEDMatrix_writeColumn+0x44>
  e2:	42 9a       	sbi	0x08, 2	; 8
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <LEDMatrix_writeColumn+0x46>
	else  MATRIX_COL7_PORT &= ~(1 << MATRIX_COL7_PIN);		// OFF
  e6:	42 98       	cbi	0x08, 2	; 8
	
	if(col_data & (1 << 7))		MATRIX_COL8_PORT |= (1 << MATRIX_COL8_PIN);		// ON
  e8:	88 23       	and	r24, r24
  ea:	14 f4       	brge	.+4      	; 0xf0 <LEDMatrix_writeColumn+0x4e>
  ec:	43 9a       	sbi	0x08, 3	; 8
  ee:	08 95       	ret
	else  MATRIX_COL8_PORT &= ~(1 << MATRIX_COL8_PIN);		// OFF
  f0:	43 98       	cbi	0x08, 3	; 8
  f2:	08 95       	ret

000000f4 <LEDMatrix_writeRow>:
}

void LEDMatrix_writeRow(uint8_t row_data)		// row 데이터 출력
{
	if(row_data & (1 << 7))		MATRIX_ROW1_PORT |= (1 << MATRIX_ROW1_PIN);		// OFF
  f4:	88 23       	and	r24, r24
  f6:	14 f4       	brge	.+4      	; 0xfc <LEDMatrix_writeRow+0x8>
  f8:	5a 9a       	sbi	0x0b, 2	; 11
  fa:	01 c0       	rjmp	.+2      	; 0xfe <LEDMatrix_writeRow+0xa>
	else  MATRIX_ROW1_PORT &= ~(1 << MATRIX_ROW1_PIN);		// ON
  fc:	5a 98       	cbi	0x0b, 2	; 11
	
	if(row_data & (1 << 6))		MATRIX_ROW2_PORT |= (1 << MATRIX_ROW2_PIN);		
  fe:	86 ff       	sbrs	r24, 6
 100:	02 c0       	rjmp	.+4      	; 0x106 <LEDMatrix_writeRow+0x12>
 102:	5b 9a       	sbi	0x0b, 3	; 11
 104:	01 c0       	rjmp	.+2      	; 0x108 <LEDMatrix_writeRow+0x14>
	else  MATRIX_ROW2_PORT &= ~(1 << MATRIX_ROW2_PIN);		
 106:	5b 98       	cbi	0x0b, 3	; 11
	
	if(row_data & (1 << 5))		MATRIX_ROW3_PORT |= (1 << MATRIX_ROW3_PIN);		
 108:	85 ff       	sbrs	r24, 5
 10a:	02 c0       	rjmp	.+4      	; 0x110 <LEDMatrix_writeRow+0x1c>
 10c:	5c 9a       	sbi	0x0b, 4	; 11
 10e:	01 c0       	rjmp	.+2      	; 0x112 <LEDMatrix_writeRow+0x1e>
	else  MATRIX_ROW3_PORT &= ~(1 << MATRIX_ROW3_PIN);		
 110:	5c 98       	cbi	0x0b, 4	; 11
	
	if(row_data & (1 << 4))		MATRIX_ROW4_PORT |= (1 << MATRIX_ROW4_PIN);		
 112:	84 ff       	sbrs	r24, 4
 114:	02 c0       	rjmp	.+4      	; 0x11a <LEDMatrix_writeRow+0x26>
 116:	5d 9a       	sbi	0x0b, 5	; 11
 118:	01 c0       	rjmp	.+2      	; 0x11c <LEDMatrix_writeRow+0x28>
	else  MATRIX_ROW4_PORT &= ~(1 << MATRIX_ROW4_PIN);		
 11a:	5d 98       	cbi	0x0b, 5	; 11
	
	if(row_data & (1 << 3))		MATRIX_ROW5_PORT |= (1 << MATRIX_ROW5_PIN);		
 11c:	83 ff       	sbrs	r24, 3
 11e:	02 c0       	rjmp	.+4      	; 0x124 <LEDMatrix_writeRow+0x30>
 120:	5e 9a       	sbi	0x0b, 6	; 11
 122:	01 c0       	rjmp	.+2      	; 0x126 <LEDMatrix_writeRow+0x32>
	else  MATRIX_ROW5_PORT &= ~(1 << MATRIX_ROW5_PIN);		
 124:	5e 98       	cbi	0x0b, 6	; 11
	
	if(row_data & (1 << 2))		MATRIX_ROW6_PORT |= (1 << MATRIX_ROW6_PIN);		
 126:	82 ff       	sbrs	r24, 2
 128:	02 c0       	rjmp	.+4      	; 0x12e <LEDMatrix_writeRow+0x3a>
 12a:	5f 9a       	sbi	0x0b, 7	; 11
 12c:	01 c0       	rjmp	.+2      	; 0x130 <LEDMatrix_writeRow+0x3c>
	else  MATRIX_ROW6_PORT &= ~(1 << MATRIX_ROW6_PIN);		
 12e:	5f 98       	cbi	0x0b, 7	; 11
	
	if(row_data & (1 << 1))		MATRIX_ROW7_PORT |= (1 << MATRIX_ROW7_PIN);		
 130:	81 ff       	sbrs	r24, 1
 132:	02 c0       	rjmp	.+4      	; 0x138 <LEDMatrix_writeRow+0x44>
 134:	58 9a       	sbi	0x0b, 0	; 11
 136:	01 c0       	rjmp	.+2      	; 0x13a <LEDMatrix_writeRow+0x46>
	else  MATRIX_ROW7_PORT &= ~(1 << MATRIX_ROW7_PIN);		
 138:	58 98       	cbi	0x0b, 0	; 11
	
	if(row_data & (1 << 0))		MATRIX_ROW8_PORT |= (1 << MATRIX_ROW8_PIN);		
 13a:	80 ff       	sbrs	r24, 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <LEDMatrix_writeRow+0x4e>
 13e:	59 9a       	sbi	0x0b, 1	; 11
 140:	08 95       	ret
	else  MATRIX_ROW8_PORT &= ~(1 << MATRIX_ROW8_PIN);		
 142:	59 98       	cbi	0x0b, 1	; 11
 144:	08 95       	ret

00000146 <main>:
}

int main(void)
{
    LEDMatrix_init();
 146:	0e 94 40 00 	call	0x80	; 0x80 <LEDMatrix_init>
    {
		for(int i = 0; i < 8; i++)
		{
			// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
 14a:	cc 24       	eor	r12, r12
 14c:	c3 94       	inc	r12
 14e:	d1 2c       	mov	r13, r1
			
			for(int j = 0; j < 8; j++)
			{
				// 하나의 열에서 켜고 싶은 위치의 LED에 HIGH를
				// 끄고 싶은 위치의 LED에 LOW를 가함
				uint8_t row_data = 1 << (7 - i);
 150:	0f 2e       	mov	r0, r31
 152:	f7 e0       	ldi	r31, 0x07	; 7
 154:	af 2e       	mov	r10, r31
 156:	b1 2c       	mov	r11, r1
 158:	f0 2d       	mov	r31, r0
{
    LEDMatrix_init();
	
    while (1) 
    {
		for(int i = 0; i < 8; i++)
 15a:	e1 2c       	mov	r14, r1
 15c:	f1 2c       	mov	r15, r1
		{
			// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
 15e:	c6 01       	movw	r24, r12
 160:	0e 2c       	mov	r0, r14
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x22>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <main+0x1e>
 16c:	80 95       	com	r24
 16e:	0e 94 51 00 	call	0xa2	; 0xa2 <LEDMatrix_writeColumn>
			
			for(int j = 0; j < 8; j++)
			{
				// 하나의 열에서 켜고 싶은 위치의 LED에 HIGH를
				// 끄고 싶은 위치의 LED에 LOW를 가함
				uint8_t row_data = 1 << (7 - i);
 172:	c5 01       	movw	r24, r10
 174:	8e 19       	sub	r24, r14
 176:	9f 09       	sbc	r25, r15
 178:	1c 2d       	mov	r17, r12
 17a:	01 c0       	rjmp	.+2      	; 0x17e <main+0x38>
 17c:	11 0f       	add	r17, r17
 17e:	8a 95       	dec	r24
 180:	ea f7       	brpl	.-6      	; 0x17c <main+0x36>
 182:	c8 e0       	ldi	r28, 0x08	; 8
 184:	d0 e0       	ldi	r29, 0x00	; 0
				LEDMatrix_writeRow(row_data);
 186:	81 2f       	mov	r24, r17
 188:	0e 94 7a 00 	call	0xf4	; 0xf4 <LEDMatrix_writeRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	81 ee       	ldi	r24, 0xE1	; 225
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x56>
 19c:	00 00       	nop
 19e:	21 97       	sbiw	r28, 0x01	; 1
		{
			// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
			
			for(int j = 0; j < 8; j++)
 1a0:	91 f7       	brne	.-28     	; 0x186 <main+0x40>
{
    LEDMatrix_init();
	
    while (1) 
    {
		for(int i = 0; i < 8; i++)
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	e2 1a       	sub	r14, r18
 1a6:	f2 0a       	sbc	r15, r18
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	e8 16       	cp	r14, r24
 1ac:	f1 04       	cpc	r15, r1
 1ae:	b9 f6       	brne	.-82     	; 0x15e <main+0x18>
 1b0:	d4 cf       	rjmp	.-88     	; 0x15a <main+0x14>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
