
chattering_solution1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:
#define F_CPU 16000000UL
#include <util/delay.h>

void UART_INIT(void)
{
	UCSR0A |= _BV(U2X0);		// 2배속 모드
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;				// 통신 속도(보울) 설정
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);		// 송수신 가능
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <UART_transmit>:
}

void UART_transmit(unsigned char data)
{
	 while( !(UCSR0A & (1<<UDRE0)) );		// 송신 가능 대기
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <UART_transmit+0x4>
	 UDR0 = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  be:	08 95       	ret

000000c0 <INIT_PORT>:
}

void INIT_PORT(void)
{
	DDRB = 0x20;		// PB5을 출력으로 설정
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		// LED는 꺼진 상태에서 시작
  c4:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;		// 버튼을 입력으로 설정
  c6:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;		// PD2 풀업 저항 사용
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <main>:
}

int main(void)
{
	UART_INIT();		// UART 통신 초기화
  ce:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
	INIT_PORT();		// 포트 설정
  d2:	0e 94 60 00 	call	0xc0	; 0xc0 <INIT_PORT>
	int state = 0;		// 현재 버튼 상태 
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			// 눌러지지 않은 상태에서 누를 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;								// 버튼 눌러진 상태
			PORTB = 0x20;							// LED 켜기
  da:	68 94       	set
  dc:	ff 24       	eor	r15, r15
  de:	f5 f8       	bld	r15, 5
		}
		else
		{
			// 눌러지지 않은 상태에서 누를 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;								// 버튼 눌러진 상태
  e0:	01 e0       	ldi	r16, 0x01	; 1
  e2:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		if(PIND & 0x04)		// 입력값 읽기
		{
			state = 0;			// 버튼 눌러지지 않은 상태
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	c0 e0       	ldi	r28, 0x00	; 0
	INIT_PORT();		// 포트 설정
	int state = 0;		// 현재 버튼 상태 
	
	while(1)
	{
		if(PIND & 0x04)		// 입력값 읽기
  e8:	4a 9b       	sbis	0x09, 2	; 9
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <main+0x26>
		{
			state = 0;			// 버튼 눌러지지 않은 상태
			PORTB = 0x00;		// LED 끄기
  ec:	15 b8       	out	0x05, r1	; 5
	
	while(1)
	{
		if(PIND & 0x04)		// 입력값 읽기
		{
			state = 0;			// 버튼 눌러지지 않은 상태
  ee:	8d 2f       	mov	r24, r29
  f0:	9c 2f       	mov	r25, r28
  f2:	fa cf       	rjmp	.-12     	; 0xe8 <main+0x1a>
			PORTB = 0x00;		// LED 끄기
		}
		else
		{
			// 눌러지지 않은 상태에서 누를 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
  f4:	89 2b       	or	r24, r25
  f6:	19 f4       	brne	.+6      	; 0xfe <main+0x30>
  f8:	8a e2       	ldi	r24, 0x2A	; 42
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_transmit>
			state = 1;								// 버튼 눌러진 상태
			PORTB = 0x20;							// LED 켜기
  fe:	f5 b8       	out	0x05, r15	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	81 ee       	ldi	r24, 0xE1	; 225
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x38>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x42>
 110:	00 00       	nop
		}
		else
		{
			// 눌러지지 않은 상태에서 누를 때마다 '*' 문자 전송
			if(state == 0)	UART_transmit('*');
			state = 1;								// 버튼 눌러진 상태
 112:	80 2f       	mov	r24, r16
 114:	91 2f       	mov	r25, r17
 116:	e8 cf       	rjmp	.-48     	; 0xe8 <main+0x1a>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
